{
  "openapi": "3.0.0",
  "info": {
    "title": "BrAPI-Genotyping",
    "description": "The Breeding API (BrAPI) is a Standardized REST ful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">General Reference Documentation</h2>\n<div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/RESTfulness\">URL Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Response_Structure\">Response Structure</a></div>\n<div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Dates_and_Times\">Date/Time Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Location_Coordinates\">Location Encoding</a></div>\n<div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Error_Handling\">Error Handling</a></div>\n<div class=\"gen-info-link\"><a href=\"https://wiki.brapi.org/index.php/Search_Services\">Search Services</a></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Core</h2>\n<div class=\"brapi-section-description\">The BrAPI Core module contains high level entities used for organization and management. This includes Programs, Trials, Studies, Locations, People, and Lists</div>\n<div class=\"version-number\">V2.1</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Core\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Core/2.1\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapicore21.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Phenotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Phenotyping module contains entities related to phenotypic observations. This includes Observation Units, Observations, Observation Variables, Traits, Scales, Methods, and Images</div>\n<div class=\"version-number\">V2.1</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Phenotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Phenotyping/2.1\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapiphenotyping21.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"current-brapi-section brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Genotyping</h2>\n<div class=\"brapi-section-description\">The BrAPI Genotyping module contains entities related to genotyping analysis. This includes Samples, Markers, Variant Sets, Variants, Call Sets, Calls, References, Reads, and Vendor Orders</div>\n<div class=\"version-number\">V2.1</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Genotyping\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Genotyping/2.1\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigenotyping21.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<div class=\"brapi-section\">\n<h2 class=\"brapi-section-title\">BrAPI Germplasm</h2>\n<div class=\"brapi-section-description\">The BrAPI Germplasm module contains entities related to germplasm management. This includes Germplasm, Germplasm Attributes, Seed Lots, Crosses, Pedigree, and Progeny</div>\n<div class=\"version-number\">V2.1</div>\n<div class=\"link-btn\"><a href=\"https://github.com/plantbreeding/API/tree/brapi-V2.1/Specification/BrAPI-Germplasm\">GitHub</a></div>\n<div class=\"link-btn\"><a href=\"https://app.swaggerhub.com/apis/PlantBreedingAPI/BrAPI-Germplasm/2.1\">SwaggerHub</a></div>\n<div class=\"link-btn\"><a href=\"https://brapigermplasm21.docs.apiary.io\">Apiary</a></div>\n<div class=\"stop-float\"></div>\n</div>\n\n<style>\n.link-btn{\nfloat: left; \nmargin: 2px 10px 0 0; \npadding: 0 5px; \nborder-radius: 5px; \nbackground-color: #ddd;\n}\n.stop-float{\n  clear: both;\n}\n.version-number{\n  float: left; \n  margin: 5px 10px 0 5px;\n}\n.brapi-section-title{\n  margin: 0 10px 0 0;\n  font-size: 20px;\n}\n.current-brapi-section{\n  font-weight: bolder;\n  border-radius: 5px; \n  background-color: #ddd;\n}\n.brapi-section{\n  padding: 5px 5px; \n}\n.brapi-section-description{\n  margin: 5px 0 0 5px;\n}\n</style>",
    "version": "2.1"
  },
  "servers": [
    {
      "url": "https://test-server.brapi.org/brapi/v2"
    }
  ],
  "security": [
    {
      "AuthorizationToken": []
    }
  ],
  "tags": [
    {
      "name": "Calls",
      "description": "Individual genotype allele calls",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Call Sets",
      "description": "Each Call Set is related to one physical sample",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Variants",
      "description": "Information about Variants, also called Markers",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Variant Sets",
      "description": "Information about Variant Sets, also called Data Sets or Allele Matrices",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Plates",
      "description": "Information about plates containing samples",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Samples",
      "description": "Information about physical samples",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "References",
      "description": "Genetic sequences used for reference",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Reference Sets",
      "description": "Collections of references",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Genome Maps",
      "description": "Information about physical and genetic maps",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    },
    {
      "name": "Vendor",
      "description": "This interface is specific to facilities that performs an external analysis, such as genotyping facilities. The interface should be implemented by that facility''s server. The breeding database is the client of this interface.",
      "externalDocs": {
        "description": "Docs",
        "url": "https://wiki.brapi.org/"
      }
    }
  ],
  "paths": {
    "/allelematrix": {
      "get": {
        "tags": [
          "Allele Matrix"
        ],
        "summary": "Use this endpoint to retrieve a two dimensional matrix of genotype data",
        "description": "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF file format, \nbut the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, \nwithout having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.    ",
        "parameters": [
          {
            "name": "dimensionVariantPage",
            "in": "query",
            "description": "The requested page number for the Variant dimension of the matrix",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "dimensionVariantPageSize",
            "in": "query",
            "description": "The requested page size for the Variant dimension of the matrix",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "dimensionCallSetPage",
            "in": "query",
            "description": "The requested page number for the CallSet dimension of the matrix",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "dimensionCallSetPageSize",
            "in": "query",
            "description": "The requested page size for the CallSet dimension of the matrix",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "preview",
            "in": "query",
            "description": "Default Value = false\n<br/>If 'preview' is set to true, then the server should return with the \"dataMatrices\" field as null or empty. All other data fields should be returned normally. \nThis is intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>If 'preview' is set to false or not set (default), then the server should return all the matrix data as requested.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dataMatrixNames",
            "in": "query",
            "description": "\"dataMatrixNames\" is a comma seperated list of names (ie 'Genotype, Read Depth' etc). This list controls which data matrices are returned in the response.\n<br> This maps to a FORMAT field in the VCF file standard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataMatrixAbbreviations",
            "in": "query",
            "description": "\"dataMatrixAbbreviations\" is a comma seperated list of abbreviations (ie 'GT, RD' etc). This list controls which data matrices are returned in the response.\n<br> This maps to a FORMAT field in the VCF file standard.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "positionRange",
            "in": "query",
            "description": "The postion range to search\n<br/> Uses the format \"contig:start-end\" where \"contig\" is the chromosome or contig name, \"start\" is  \nthe starting position of the range, and \"end\" is the ending position of the range\n<br> Example: CRHOM_1:12000-14000",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "germplasmDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Germplasm` unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "germplasmName",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Germplasm` by its human readable name. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "germplasmPUI",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Germplasm` by its global permanent unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `CallSet` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Variant` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `VariantSet` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expandHomozygotes",
            "in": "query",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unknownString",
            "in": "query",
            "description": "The string to use as a representation for missing data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepPhased",
            "in": "query",
            "description": "The string to use as a separator for phased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepUnphased",
            "in": "query",
            "description": "The string to use as a separator for unphased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlleleMatrixResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/calls": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "Gets a filtered list of `Calls`",
        "description": "Gets a filtered list of `Call` JSON objects.",
        "parameters": [
          {
            "name": "callSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `CallSet` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Variant` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `VariantSet` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expandHomozygotes",
            "in": "query",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unknownString",
            "in": "query",
            "description": "The string to use as a representation for missing data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepPhased",
            "in": "query",
            "description": "The string to use as a separator for phased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepUnphased",
            "in": "query",
            "description": "The string to use as a separator for unphased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Calls"
        ],
        "summary": "Update existing `Calls` with new genotype value or metadata",
        "description": "Update existing `Calls` with new genotype value or metadata\n<br/>Implementation Note - \n<br/>A `Call` object does not have a DbId of its own. It is defined by the unique combination of \n`callSetDbId`, `variantDbId`, and `variantSetDbId`. These three fields MUST be present for every \n`call` update request. This endpoint should not allow these fields to be modified for a given \n`call`. Modifying these fields in the database is effectively moving a cell to a different location\nin the genotype matrix. This action is dangerous and can cause data collisions.     ",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/callsets": {
      "get": {
        "tags": [
          "Call Sets"
        ],
        "summary": "Gets a filtered list of `CallSet` JSON objects.",
        "description": "Gets a filtered list of `CallSet` JSON objects.",
        "parameters": [
          {
            "name": "callSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `CallSet` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callSetName",
            "in": "query",
            "description": "The human readable name of a `CallSet`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `VariantSet` within the given database server",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sampleDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Sample` within the given database server\n<br>Filter results to only include `CallSets` generated from this `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "germplasmDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Germplasm` unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallSetsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/callsets/{callSetDbId}": {
      "get": {
        "tags": [
          "Call Sets"
        ],
        "summary": "Gets a `CallSet` by ID.",
        "description": "Gets a `CallSet` by ID.",
        "parameters": [
          {
            "name": "callSetDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `CallSet` within the given database server",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/callSetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/callsets/{callSetDbId}/calls": {
      "get": {
        "tags": [
          "Call Sets"
        ],
        "summary": "Gets a list of `Calls` associated with a `CallSet`.",
        "description": "Gets a list of `Calls` associated with a `CallSet`.",
        "parameters": [
          {
            "name": "callSetDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `CallSet` within the given database server",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expandHomozygotes",
            "in": "query",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unknownString",
            "in": "query",
            "description": "The string to use as a representation for missing data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepPhased",
            "in": "query",
            "description": "The string to use as a separator for phased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepUnphased",
            "in": "query",
            "description": "The string to use as a separator for unphased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Genome Maps"
        ],
        "summary": "Get the Genomic Maps",
        "description": "Get list of maps",
        "parameters": [
          {
            "name": "mapDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `GenomeMap`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mapPUI",
            "in": "query",
            "description": "The DOI or other permanent identifier for a `GenomeMap`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scientificName",
            "in": "query",
            "description": "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of map, usually \"Genetic\" or \"Physical\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCropName",
            "in": "query",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trialDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenomeMapListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/maps/{mapDbId}": {
      "get": {
        "tags": [
          "Genome Maps"
        ],
        "summary": "Get the details of a specific Genomic Map",
        "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
        "parameters": [
          {
            "name": "mapDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `GenomeMap`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenomeMapSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/maps/{mapDbId}/linkagegroups": {
      "get": {
        "tags": [
          "Genome Maps"
        ],
        "summary": "Get the Linkage Groups of a specific Genomic Map",
        "description": "Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.",
        "parameters": [
          {
            "name": "mapDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `GenomeMap`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkageGroupListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/markerpositions": {
      "get": {
        "tags": [
          "Genome Maps"
        ],
        "summary": "Get marker position info",
        "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
        "parameters": [
          {
            "name": "mapDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `GenomeMap`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkageGroupName",
            "in": "query",
            "description": "The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantDbId",
            "in": "query",
            "description": "The unique id for a marker",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minPosition",
            "in": "query",
            "description": "The minimum position",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxPosition",
            "in": "query",
            "description": "The maximum position",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkerPositionListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/plates": {
      "get": {
        "tags": [
          "Plates"
        ],
        "summary": "Get a filtered list of Plates.",
        "description": "Get a filtered list of `Plates`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
        "parameters": [
          {
            "name": "sampleDbId",
            "in": "query",
            "description": "The unique identifier for a `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sampleName",
            "in": "query",
            "description": "The human readable name of the `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sampleGroupDbId",
            "in": "query",
            "description": "The unique identifier for a group of related `Samples`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "observationUnitDbId",
            "in": "query",
            "description": "The ID which uniquely identifies an `ObservationUnit`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plateDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Plate` of `Samples`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plateName",
            "in": "query",
            "description": "The human readable name of a `Plate` of `Samples`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCropName",
            "in": "query",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trialDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "germplasmDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Germplasm` unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceID",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Plates"
        ],
        "summary": "Update the details of existing Plates",
        "description": "Update the details of existing Plates",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PlateNewRequest"
                },
                "example": {
                  "<plateDbId_1>": {
                    "additionalInfo": {},
                    "externalReferences": [],
                    "plateBarcode": "3a027b59",
                    "plateFormat": "PLATE_96",
                    "plateName": "Plate_alpha_20191022",
                    "programDbId": "bd748e00",
                    "sampleType": "Tissue",
                    "studyDbId": "64bd6bf9",
                    "trialDbId": "d34c5349"
                  },
                  "<plateDbId_2>": {
                    "additionalInfo": {},
                    "externalReferences": [],
                    "plateBarcode": "27b593a0",
                    "plateFormat": "PLATE_96",
                    "plateName": "Plate_alpha_20191022",
                    "programDbId": "bd748e00",
                    "sampleType": "Tissue",
                    "studyDbId": "64bd6bf9",
                    "trialDbId": "d34c5349"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plates"
        ],
        "summary": "Submit new Plate entities to the server",
        "description": "Submit new Plate entities to the server",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlateNewRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/plates/{plateDbId}": {
      "get": {
        "tags": [
          "Plates"
        ],
        "summary": "Get the details of a specific Plate.",
        "description": "Get the details of a specific `Plate`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
        "parameters": [
          {
            "name": "plateDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `Plate`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlateSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/references": {
      "get": {
        "tags": [
          "References"
        ],
        "summary": "Gets a filtered list of `Reference` objects.",
        "description": "`GET /references` will return a filtered list of `Reference` JSON objects.",
        "parameters": [
          {
            "name": "referenceDbId",
            "in": "query",
            "description": "The ID of the `Reference` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceSetDbId",
            "in": "query",
            "description": "The ID of the `ReferenceSet` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accession",
            "in": "query",
            "description": "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "md5checksum",
            "in": "query",
            "description": "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDerived",
            "in": "query",
            "description": "If the reference is derived from a source sequence",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "minLength",
            "in": "query",
            "description": "The minimum length of the reference sequences to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxLength",
            "in": "query",
            "description": "The maximum length of the reference sequences to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "commonCropName",
            "in": "query",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trialDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferencesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/references/{referenceDbId}": {
      "get": {
        "tags": [
          "References"
        ],
        "summary": "Gets a `Reference` by ID.",
        "description": "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
        "parameters": [
          {
            "name": "referenceDbId",
            "in": "path",
            "description": "The ID of the `Reference` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/references/{referenceDbId}/bases": {
      "get": {
        "tags": [
          "References"
        ],
        "summary": "Lists `Reference` bases by ID and optional range.",
        "description": "Lists `Reference` bases by ID and optional range.",
        "parameters": [
          {
            "name": "referenceDbId",
            "in": "path",
            "description": "The ID of the `Reference` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start position (0-based) of this query. Defaults to 0.\nGenomic positions are non-negative integers less than reference length.\nRequests spanning the join of circular genomes are represented as\ntwo requests one on each side of the join (position 0).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The end position (0-based, exclusive) of this query. Defaults to the length of this `Reference`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceBasesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/referencesets": {
      "get": {
        "tags": [
          "Reference Sets"
        ],
        "summary": "Gets a list of `ReferenceSets`.",
        "description": "Gets a filtered list of `ReferenceSets`.",
        "parameters": [
          {
            "name": "referenceSetDbId",
            "in": "query",
            "description": "The ID of the `ReferenceSet` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accession",
            "in": "query",
            "description": "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assemblyPUI",
            "in": "query",
            "description": "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "md5checksum",
            "in": "query",
            "description": "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCropName",
            "in": "query",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trialDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/referencesets/{referenceSetDbId}": {
      "get": {
        "tags": [
          "Reference Sets"
        ],
        "summary": "Gets a `ReferenceSet` by ID.",
        "description": "Gets a `ReferenceSet` by ID.",
        "parameters": [
          {
            "name": "referenceSetDbId",
            "in": "path",
            "description": "The ID of the `ReferenceSet` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetsSingleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/samples": {
      "get": {
        "tags": [
          "Samples"
        ],
        "summary": "Get the Samples",
        "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.",
        "parameters": [
          {
            "name": "sampleDbId",
            "in": "query",
            "description": "The unique identifier for a `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sampleName",
            "in": "query",
            "description": "The human readable name of the `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sampleGroupDbId",
            "in": "query",
            "description": "The unique identifier for a group of related `Samples`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "observationUnitDbId",
            "in": "query",
            "description": "The ID which uniquely identifies an `ObservationUnit`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plateDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Plate` of `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "plateName",
            "in": "query",
            "description": "The human readable name of a `Plate` of `Sample`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCropName",
            "in": "query",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trialDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "germplasmDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Germplasm` unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceID",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Samples"
        ],
        "summary": "Update the details of existing Samples",
        "description": "Update the details of existing Samples",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/SampleNewRequest"
                },
                "example": {
                  "<sampleDbId_1>": {
                    "additionalInfo": {},
                    "column": 6,
                    "externalReferences": [],
                    "germplasmDbId": "7e08d538",
                    "observationUnitDbId": "073a3ce5",
                    "plateDbId": "2dce16d1",
                    "plateName": "Plate_alpha_20191022",
                    "programDbId": "bd748e00",
                    "row": "B",
                    "sampleBarcode": "3a027b59",
                    "sampleDescription": "This sample was taken from the root of a tree",
                    "sampleGroupDbId": "8524b436",
                    "sampleName": "Sample_alpha_20191022",
                    "samplePUI": "doi:10.15454/312953986E3",
                    "sampleTimestamp": "2018-01-01T18:47:23-0600",
                    "sampleType": "Tissue",
                    "studyDbId": "64bd6bf9",
                    "takenBy": "Bob",
                    "tissueType": "Root",
                    "trialDbId": "d34c5349",
                    "well": "B6"
                  },
                  "<sampleDbId_2>": {
                    "additionalInfo": {},
                    "column": 6,
                    "externalReferences": [],
                    "germplasmDbId": "7e08d538",
                    "observationUnitDbId": "073a3ce5",
                    "plateDbId": "2dce16d1",
                    "plateName": "Plate_alpha_20191022",
                    "programDbId": "bd748e00",
                    "row": "B",
                    "sampleBarcode": "3a027b59",
                    "sampleDescription": "This sample was taken from the root of a tree",
                    "sampleGroupDbId": "8524b436",
                    "sampleName": "Sample_alpha_20191022",
                    "samplePUI": "doi:10.15454/312953986E3",
                    "sampleTimestamp": "2018-01-01T18:47:23-0600",
                    "sampleType": "Tissue",
                    "studyDbId": "64bd6bf9",
                    "takenBy": "Bob",
                    "tissueType": "Root",
                    "trialDbId": "d34c5349",
                    "well": "B6"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Samples"
        ],
        "summary": "Add new Samples",
        "description": "Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SampleNewRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/samples/{sampleDbId}": {
      "get": {
        "tags": [
          "Samples"
        ],
        "summary": "Get the details of a specific Sample",
        "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
        "parameters": [
          {
            "name": "sampleDbId",
            "in": "path",
            "description": "The unique identifier for a `Sample`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Samples"
        ],
        "summary": "Update the details of an existing Sample",
        "description": "**Deprecated in v2.1** Please use `PUT /samples`. Github issue number #462 \n<br/>Update the details of an existing Sample",
        "parameters": [
          {
            "name": "sampleDbId",
            "in": "path",
            "description": "The unique identifier for a `Sample`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleNewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/search/allelematrix": {
      "post": {
        "tags": [
          "Allele Matrix"
        ],
        "summary": "Submit a search request for a Allele Matrix",
        "description": "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet. \n<br/>Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use the corresponding `GET /search/allelematrix/{searchResultsDbId}` to retrieve the results of the search. \n<br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "Study Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlleleMatrixSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlleleMatrixResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/allelematrix/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Allele Matrix"
        ],
        "summary": "Get the results of a Allele Matrix search request",
        "description": "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet. \n<br/>Clients should submit a search request using the corresponding `POST /search/allelematrix` endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use this endpoint to retrieve the results of the search. \n<br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlleleMatrixResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/calls": {
      "post": {
        "tags": [
          "Calls"
        ],
        "summary": "Submit a search request for `Calls`",
        "description": "Submit a search request for `Calls`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/calls/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details. \n<br/>\n<br/>\n<strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the \n<a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "Study Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallsSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/calls/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "Get the results of a `Calls` search request",
        "description": "Get the results of a `Calls` search request <br/>\nClients should submit a search request using the corresponding `POST /search/calls` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/callsets": {
      "post": {
        "tags": [
          "Call Sets"
        ],
        "summary": "Submit a search request for `CallSets`",
        "description": "Submit a search request for `CallSets` \n<br> Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callsets/{searchResultsDbId}` to retrieve the results of the search. \n<br> Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "Study Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/callSetsSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallSetsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/callsets/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Call Sets"
        ],
        "summary": "Get the results of a `CallSets` search request",
        "description": "Get the results of a `CallSets` search request \n<br> Clients should submit a search request using the corresponding `POST /search/callsets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. \n<br>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallSetsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/markerpositions": {
      "post": {
        "tags": [
          "Genome Maps"
        ],
        "summary": "Submit a search request for `MarkerPositions`",
        "description": "Submit a search request for `MarkerPositions`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerpositions/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkerPositionSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkerPositionListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/markerpositions/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Genome Maps"
        ],
        "summary": "Get the results of a `MarkerPositions` search request",
        "description": "Get the results of a `MarkerPositions` search request <br/>\nClients should submit a search request using the corresponding `POST /search/markerpositions` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkerPositionListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/plates": {
      "post": {
        "tags": [
          "Plates"
        ],
        "summary": "Submit a search request for `Plates`",
        "description": "Submit a search request for `Plates`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plates/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlateSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlateListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/plates/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Plates"
        ],
        "summary": "Get the results of a `Plates` search request",
        "description": "Get the results of a `Plates` search request <br/>\nClients should submit a search request using the corresponding `POST /search/plates` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlateListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/search/references": {
      "post": {
        "tags": [
          "References"
        ],
        "summary": "Submit a search request for `References`",
        "description": "Submit a search request for `References`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/references/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "References Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferencesSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferencesListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/references/{searchResultsDbId}": {
      "get": {
        "tags": [
          "References"
        ],
        "summary": "Get the results of a `References` search request",
        "description": "Get the results of a `References` search request <br/>\nClients should submit a search request using the corresponding `POST /search/references` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferencesListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/referencesets": {
      "post": {
        "tags": [
          "Reference Sets"
        ],
        "summary": "Submit a search request for `ReferenceSets`",
        "description": "Submit a search request for `ReferenceSets`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referencesets/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceSetsSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/referencesets/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Reference Sets"
        ],
        "summary": "Get the results of a `ReferenceSets` search request",
        "description": "Get the results of a `ReferenceSets` search request <br/>\nClients should submit a search request using the corresponding `POST /search/referencesets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/samples": {
      "post": {
        "tags": [
          "Samples"
        ],
        "summary": "Submit a search request for `Samples`",
        "description": "Submit a search request for `Samples`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/samples/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/samples/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Samples"
        ],
        "summary": "Get the results of a `Samples` search request",
        "description": "Get the results of a `Samples` search request <br/>\nClients should submit a search request using the corresponding `POST /search/samples` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/search/variants": {
      "post": {
        "tags": [
          "Variants"
        ],
        "summary": "Submit a search request for `Variants`",
        "description": "Submit a search request for `Variants`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variants/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\n<strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the \n<a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "Study Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/variants/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Variants"
        ],
        "summary": "Get the results of a `Variants` search request",
        "description": "Get the results of a `Variants` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variants` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/variantsets": {
      "post": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Submit a search request for `VariantSets`",
        "description": "Submit a search request for `VariantSets`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantsets/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "Study Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantSetsSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantSetsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/search/variantsets/{searchResultsDbId}": {
      "get": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Get the results of a `VariantSets` search request",
        "description": "Get the results of a `VariantSets` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variantsets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters": [
          {
            "name": "searchResultsDbId",
            "in": "path",
            "description": "Unique identifier which references the search results",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantSetsListResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202AcceptedSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/variants": {
      "get": {
        "tags": [
          "Variants"
        ],
        "summary": "Gets a filtered list of `Variants`.",
        "description": "Gets a filtered list of `Variants`.",
        "parameters": [
          {
            "name": "variantDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Variant`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `VariantSet`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `Reference`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceSetDbId",
            "in": "query",
            "description": "The ID which uniquely identifies a `ReferenceSet`",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/variants/{variantDbId}": {
      "get": {
        "tags": [
          "Variants"
        ],
        "summary": "Gets a `Variant` by ID.",
        "description": "The endpoint `GET /variants/{id}` will return a JSON version of `Variant`.",
        "parameters": [
          {
            "name": "variantDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `Variant`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/variants/{variantDbId}/calls": {
      "get": {
        "tags": [
          "Variants"
        ],
        "summary": "Gets a list of `Calls` associated with a `Variant`.",
        "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.",
        "parameters": [
          {
            "name": "variantDbId",
            "in": "path",
            "description": "The ID which uniquely identifies a `Variant`",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expandHomozygotes",
            "in": "query",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unknownString",
            "in": "query",
            "description": "The string to use as a representation for missing data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepPhased",
            "in": "query",
            "description": "The string to use as a separator for phased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepUnphased",
            "in": "query",
            "description": "The string to use as a separator for unphased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/variantsets": {
      "get": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Gets a filtered list of `VariantSets`.",
        "description": "Will return a filtered list of `VariantSet`.",
        "parameters": [
          {
            "name": "variantSetDbId",
            "in": "query",
            "description": "The ID of the `VariantSet` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantDbId",
            "in": "query",
            "description": "The ID of the `Variant` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callSetDbId",
            "in": "query",
            "description": "The ID of the `CallSet` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceSetDbId",
            "in": "query",
            "description": "The ID of the reference set that describes the sequences used by the variants in this set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCropName",
            "in": "query",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "programDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyDbId",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studyName",
            "in": "query",
            "description": "Use this parameter to only return results associated with the given `Study` by its human readable name. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceId",
            "in": "query",
            "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalReferenceSource",
            "in": "query",
            "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantSetsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/variantsets/extract": {
      "post": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Create new `VariantSet` based on search results",
        "description": "Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "description": "Study Search request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantSetsExtractRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantSetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}": {
      "get": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Gets a `VariantSet` by ID.",
        "description": "This call will return a JSON version of a `VariantSet`.",
        "parameters": [
          {
            "name": "variantSetDbId",
            "in": "path",
            "description": "The ID of the `Variant` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantSetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}/calls": {
      "get": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Gets a list of `Calls` associated with a `VariantSet`.",
        "description": "Gets a list of `Calls` associated with a `VariantSet`.",
        "parameters": [
          {
            "name": "variantSetDbId",
            "in": "path",
            "description": "The ID of the `VariantSet` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expandHomozygotes",
            "in": "query",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unknownString",
            "in": "query",
            "description": "The string to use as a representation for missing data",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepPhased",
            "in": "query",
            "description": "The string to use as a separator for phased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sepUnphased",
            "in": "query",
            "description": "The string to use as a separator for unphased allele calls",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}/callsets": {
      "get": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Gets a list of `CallSets` associated with a `VariantSet`.",
        "description": "Gets a list of `CallSets` associated with a `VariantSet`.",
        "parameters": [
          {
            "name": "callSetDbId",
            "in": "query",
            "description": "The ID of the `CallSet` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callSetName",
            "in": "query",
            "description": "The human readable name of the `CallSet` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantSetDbId",
            "in": "path",
            "description": "The ID of the `VariantSet` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallSetsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}/variants": {
      "get": {
        "tags": [
          "Variant Sets"
        ],
        "summary": "Gets a `Variants` for a given `VariantSet`.",
        "description": "This call will return an array of `Variants`.",
        "parameters": [
          {
            "name": "variantDbId",
            "in": "query",
            "description": "The ID of the `Variant` to be retrieved.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantSetDbId",
            "in": "path",
            "description": "The ID of the `VariantSet` to be retrieved.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "33c27874"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VariantsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/vendor/orders": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "List current available orders",
        "description": "List current available orders",
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "description": "The order id returned by the vendor when the order was successfully submitted. From response of \"POST /vendor/orders\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submissionId",
            "in": "query",
            "description": "The submission id returned by the vendor when a set of plates was successfully submitted. From response of \"POST /vendor/plates\"",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorOrderListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vendor"
        ],
        "summary": "Submit New Order",
        "description": "Submit a new order to a vendor",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorOrderSubmissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorOrderSubmissionSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/vendor/orders/{orderId}/plates": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Get the Plates for a specific Order",
        "description": "Retrieve the plate and sample details of an order being processed",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id returned by the vendor when the order was successfully submitted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorPlateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/vendor/orders/{orderId}/results": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Get the results of a specific Order",
        "description": "Retrieve the data files generated by the vendors analysis",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id returned by the vendor when the order was successfully submitted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorResultFileListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/vendor/orders/{orderId}/status": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Get the status of a specific Order",
        "description": "Retrieve the current status of an order being processed",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order id returned by the vendor when the order was successfully submitted.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorOrderStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/vendor/plates": {
      "post": {
        "tags": [
          "Vendor"
        ],
        "summary": "Submit a new set of Sample data",
        "description": "Submit a new set of Sample data",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorPlateSubmissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorPlateSubmissionIdSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          }
        }
      }
    },
    "/vendor/plates/{submissionId}": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Get the data for a submitted set of plates",
        "description": "Get data for a submitted set of plates",
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "The submission id returned by the vendor when a set of plates was successfully submitted. From response of \"POST /vendor/plates\"",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorPlateSubmissionSingleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
              }
            }
          }
        }
      }
    },
    "/vendor/specifications": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Get the Vendor Specifications",
        "description": "Defines the plate format specification for the vendor.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^Bearer .*$",
              "type": "string"
            },
            "example": "Bearer XXXX"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorSpecificationSingleResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AlleleMatrix": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "A list of unique identifiers for the CallSets contained in the matrix response. This array should match the ordering for columns in the matrix. A CallSet is a unique combination of a Sample and a sequencing event. CallSets often have a 1-to-1 relationship with Samples, but this is not always the case.",
            "example": [
              "aca00001",
              "aca00002",
              "aca00003"
            ],
            "items": {
              "type": "string"
            }
          },
          "dataMatrices": {
            "type": "array",
            "description": "The 'dataMatrices' are an array of matrix objects that hold the allele data and associated metadata. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows.",
            "example": [
              {
                "dataMatrix": [
                  [
                    "0|0",
                    "1|0",
                    "1/1"
                  ],
                  [
                    "0|0",
                    "1|0",
                    "1/1"
                  ],
                  [
                    "0|0",
                    "1|0",
                    "1/1"
                  ]
                ],
                "dataMatrixAbbreviation": "GT",
                "dataMatrixName": "Genotype",
                "dataType": "string"
              },
              {
                "dataMatrix": [
                  [
                    "48",
                    "48",
                    "43"
                  ],
                  [
                    "49",
                    "3",
                    "41"
                  ],
                  [
                    "21",
                    "2",
                    "35"
                  ]
                ],
                "dataMatrixAbbreviation": "GQ",
                "dataMatrixName": "Genotype Quality",
                "dataType": "integer"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AlleleMatrix_dataMatrices"
            }
          },
          "expandHomozygotes": {
            "type": "boolean",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example": true
          },
          "pagination": {
            "type": "array",
            "description": "Pagination for the matrix",
            "example": [
              {
                "dimension": "VARIANTS",
                "page": 0,
                "pageSize": 500,
                "totalCount": 10000,
                "totalPages": 20
              },
              {
                "dimension": "CALLSETS",
                "page": 4,
                "pageSize": 1000,
                "totalCount": 10000,
                "totalPages": 10
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AlleleMatrix_pagination"
            }
          },
          "sepPhased": {
            "type": "string",
            "description": "The string used as a separator for phased allele calls.",
            "example": "|"
          },
          "sepUnphased": {
            "type": "string",
            "description": "The string used as a separator for unphased allele calls.",
            "example": "/"
          },
          "unknownString": {
            "type": "string",
            "description": "The string used as a representation for missing data.",
            "example": "."
          },
          "variantDbIds": {
            "type": "array",
            "description": "A list of unique identifiers for the Variants contained in the matrix response. This array should match the ordering for rows in the matrix.",
            "example": [
              "feb54257",
              "feb40355",
              "feb40323"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "A list of unique identifiers for the VariantSets contained in the matrix response. A VariantSet is a data set originating from a sequencing event. Often, users will only be interested in data from a single VariantSet, but in some cases a user might be interested in a matrix with data from multiple VariantSets.",
            "example": [
              "cfde3944",
              "cfde2077",
              "cfde4424"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "x-brapi-metadata": {
          "description": "The AlleleMatrix object is used to describe a matrix of genotyping results. This 2d array of data reduces the overall size of the response for larger datasets, when compared to the Calls endpoints. This makes genotype data retrieval faster and easier.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "AlleleMatrix"
        }
      },
      "AlleleMatrixSearchRequest": {
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `CallSets` within the given database server",
            "example": [
              "a03202ec",
              "274e4f63"
            ],
            "items": {
              "type": "string"
            }
          },
          "dataMatrixAbbreviations": {
            "type": "array",
            "description": "`dataMatrixAbbreviations` is a comma seperated list of abbreviations (ie 'GT', 'RD' etc). This list controls which data matrices are returned in the response.",
            "example": [
              "GT",
              "RD"
            ],
            "items": {
              "type": "string"
            }
          },
          "dataMatrixNames": {
            "type": "array",
            "description": "`dataMatrixNames` is a list of names (ie 'Genotype', 'Read Depth' etc). This list controls which data matrices are returned in the response.",
            "example": [
              "Genotype",
              "Read Depth"
            ],
            "items": {
              "type": "string"
            }
          },
          "expandHomozygotes": {
            "type": "boolean",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example": true
          },
          "germplasmDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Germplasm` within the given database server",
            "example": [
              "a03202ec",
              "274e4f63"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "A list of human readable `Germplasm` names",
            "example": [
              "a03202ec",
              "274e4f63"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmPUIs": {
            "type": "array",
            "description": "A list of premenant unique identifiers associated with `Germplasm`",
            "example": [
              "a03202ec",
              "274e4f63"
            ],
            "items": {
              "type": "string"
            }
          },
          "pagination": {
            "type": "array",
            "description": "Pagination for the matrix",
            "example": [
              {
                "dimension": "variants",
                "page": 0,
                "pageSize": 500
              },
              {
                "dimension": "callsets",
                "page": 4,
                "pageSize": 1000
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AlleleMatrixSearchRequest_pagination"
            }
          },
          "positionRanges": {
            "type": "array",
            "description": "The postion range to search\n<br/>\nUses the format \"<chrom>:<start>-<end>\" where <chrom> is the chromosome name, <start> is \nthe starting position of the range, and <end> is the ending position of the range",
            "example": [
              "20:1000-35000",
              "20:87000-125000"
            ],
            "items": {
              "type": "string"
            }
          },
          "preview": {
            "type": "boolean",
            "description": "Default Value = false\n<br/>\nIf 'preview' is set to true, then the server should only return the lists of 'callSetDbIds', \n'variantDbIds', and 'variantSetDbIds'. The server should not return any matrix data. This\nis intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>\nIf 'preview' is set to false or not set (default), then the server should return all the matrix\ndata as requested.",
            "example": true,
            "default": false
          },
          "sampleDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Samples` within the given database server",
            "example": [
              "a03202ec",
              "274e4f63"
            ],
            "items": {
              "type": "string"
            }
          },
          "sepPhased": {
            "type": "string",
            "description": "The string used as a separator for phased allele calls.",
            "example": "|"
          },
          "sepUnphased": {
            "type": "string",
            "description": "The string used as a separator for unphased allele calls.",
            "example": "/"
          },
          "unknownString": {
            "type": "string",
            "description": "The string used as a representation for missing data.",
            "example": "."
          },
          "variantDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Variants` within the given database server",
            "example": [
              "bba0b258",
              "ff97d4f0"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `VariantSets` within the given database server",
            "example": [
              "407c0508",
              "49e24dfc"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Analysis": {
        "type": "object",
        "properties": {
          "analysisDbId": {
            "type": "string",
            "description": "Unique identifier for this analysis description",
            "example": "6191a6bd"
          },
          "analysisName": {
            "type": "string",
            "description": "A human readable name for this analysis",
            "example": "Standard QC"
          },
          "created": {
            "type": "string",
            "description": "The time at which this record was created, in ISO 8601 format.",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "A human readable description of the analysis",
            "example": "This is a formal description of a QC methodology. Blah blah blah ..."
          },
          "software": {
            "type": "array",
            "description": "The software run to generate this analysis.",
            "example": [
              "https://github.com/genotyping/QC"
            ],
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of analysis.",
            "example": "QC"
          },
          "updated": {
            "type": "string",
            "description": "The time at which this record was last updated, in ISO 8601 format.",
            "format": "date-time"
          }
        },
        "description": "An analysis contains an interpretation of one or several experiments. (e.g. SNVs, copy number variations, methylation status) together with information about the methodology used."
      },
      "AvailableFormat": {
        "type": "object",
        "properties": {
          "dataFormat": {
            "type": "string",
            "description": "dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)",
            "enum": [
              "DartSeq",
              "VCF",
              "Hapmap",
              "tabular",
              "JSON"
            ]
          },
          "expandHomozygotes": {
            "type": "boolean",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example": true
          },
          "fileFormat": {
            "type": "string",
            "description": "fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
            "enum": [
              "text/csv",
              "text/tsv",
              "application/excel",
              "application/zip",
              "application/json"
            ]
          },
          "fileURL": {
            "type": "string",
            "description": "A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.",
            "format": "uri"
          },
          "sepPhased": {
            "type": "string",
            "description": "The string used as a separator for phased allele calls.",
            "example": "|"
          },
          "sepUnphased": {
            "type": "string",
            "description": "The string used as a separator for unphased allele calls.",
            "example": "/"
          },
          "unknownString": {
            "type": "string",
            "description": "The string used as a representation for missing data.",
            "example": "."
          }
        },
        "description": "Each 'availableFormat' object is a pairing of dataFormat and fileFormat. These must be communicated in pairs because they are not independant parameters and sometimes one influences the other."
      },
      "Call": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "callSetDbId": {
            "type": "string",
            "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
            "example": "16466f55"
          },
          "callSetName": {
            "type": "string",
            "description": "The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
            "example": "Sample_123_DNA_Run_456"
          },
          "genotype": {
            "$ref": "#/components/schemas/ListValue"
          },
          "genotypeMetadata": {
            "type": "array",
            "description": "Genotype Metadata are additional layers of metadata associated with each genotype.",
            "items": {
              "$ref": "#/components/schemas/Call_genotypeMetadata"
            }
          },
          "genotypeValue": {
            "type": "string",
            "description": "The value of this genotype call",
            "example": "1/1"
          },
          "genotype_likelihood": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `genotypeMetadata`. Github issue number #491             \n<br>The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.",
            "example": [
              1
            ],
            "deprecated": true,
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "phaseSet": {
            "type": "string",
            "description": "If this field is populated, this variant call's genotype ordering implies the phase of the bases and \nis consistent with any other variant calls on the same contig which have the same phase set string.",
            "example": "6410afc5"
          },
          "variantDbId": {
            "type": "string",
            "description": "The ID of the variant this call belongs to.",
            "example": "538c8ecf"
          },
          "variantName": {
            "type": "string",
            "description": "The name of the variant this call belongs to.",
            "example": "Marker A"
          },
          "variantSetDbId": {
            "type": "string",
            "description": "The unique identifier for a VariantSet",
            "example": "87a6ac1e"
          },
          "variantSetName": {
            "type": "string",
            "description": "The human readable name for a VariantSet",
            "example": "Maize QC DataSet 002334"
          }
        },
        "description": "A `Call` represents the determination of genotype with respect to a particular `Variant`.\n\nIt may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.",
        "x-brapi-metadata": {
          "description": "A Call represents the determination of genotype with respect to a particular Variant. It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a Call Set with the name NA_12345.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "Call"
        }
      },
      "CallSet": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "callSetDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a CallSet within the given database server",
            "example": "eb2bfd3d"
          },
          "callSetName": {
            "type": "string",
            "description": "The human readable name which identifies a germplasm within the given database server",
            "example": "Sample_123_DNA_Run_456"
          },
          "created": {
            "type": "string",
            "description": "The date this call set was created",
            "format": "date-time"
          },
          "externalReferences": {
            "$ref": "#/components/schemas/ExternalReferences"
          },
          "sampleDbId": {
            "type": "string",
            "description": "The Biosample entity the call set data was generated from.",
            "example": "5e50e11d"
          },
          "studyDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a study within the given database server",
            "example": "708149c1"
          },
          "updated": {
            "type": "string",
            "description": "The time at which this call set was last updated",
            "format": "date-time"
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "The IDs of the variantSets this callSet has calls in.",
            "example": [
              "cfd3d60f",
              "a4e8bfe9"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "A CallSet is a collection of Calls that were generated by the same analysis of the same Sample",
        "x-brapi-metadata": {
          "description": "A CallSet is a collection of Calls that were generated by the same analysis of the same Sample",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "CallSet"
        }
      },
      "CallsSearchRequest": {
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `CallSets` within the given database server",
            "example": [
              "a03202ec",
              "274e4f63"
            ],
            "items": {
              "type": "string"
            }
          },
          "expandHomozygotes": {
            "type": "boolean",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example": true
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "pageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "example": "33c27874",
            "deprecated": true
          },
          "sepPhased": {
            "type": "string",
            "description": "The string used as a separator for phased allele calls.",
            "example": "|"
          },
          "sepUnphased": {
            "type": "string",
            "description": "The string used as a separator for unphased allele calls.",
            "example": "/"
          },
          "unknownString": {
            "type": "string",
            "description": "The string used as a representation for missing data.",
            "example": "."
          },
          "variantDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Variant` within the given database server",
            "example": [
              "bba0b258",
              "ff97d4f0"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `VariantSets` within the given database server",
            "example": [
              "407c0508",
              "49e24dfc"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContentTypes": {
        "type": "string",
        "enum": [
          "application/json",
          "text/csv",
          "text/tsv",
          "application/flapjack"
        ]
      },
      "Context": {
        "title": "context",
        "type": "array",
        "description": "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
        "example": [
          "https://brapi.org/jsonld/context/metadata.jsonld"
        ],
        "items": {
          "type": "string",
          "format": "uri"
        }
      },
      "ExternalReferences": {
        "title": "ExternalReferences",
        "type": "array",
        "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
        "example": [
          {
            "referenceId": "doi:10.155454/12341234",
            "referenceSource": "DOI"
          },
          {
            "referenceId": "75a50e76",
            "referenceSource": "Remote Data Collection Upload Tool"
          }
        ],
        "items": {
          "$ref": "#/components/schemas/ExternalReferences_inner"
        }
      },
      "GenomeMap": {
        "required": [
          "commonCropName",
          "mapDbId",
          "type"
        ],
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about a `GenomeMap`",
            "example": "Comments about this map"
          },
          "commonCropName": {
            "type": "string",
            "description": "The common name of the `Crop`",
            "example": "Paw Paw"
          },
          "documentationURL": {
            "type": "string",
            "description": "A URL to the human readable documentation of an object",
            "format": "uri",
            "example": "https://brapi.org"
          },
          "linkageGroupCount": {
            "type": "integer",
            "description": "The number of linkage groups present in a `GenomeMap`",
            "example": 5
          },
          "mapDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `GenomeMap`",
            "example": "142cffd5"
          },
          "mapName": {
            "type": "string",
            "description": "A human readable name for a `GenomeMap`",
            "example": "Genome Map 1"
          },
          "mapPUI": {
            "type": "string",
            "description": "The DOI or other permanent identifier for a `GenomeMap`",
            "example": "doi:10.3207/2959859860"
          },
          "markerCount": {
            "type": "integer",
            "description": "The number of markers present in a `GenomeMap`",
            "example": 1100
          },
          "publishedDate": {
            "type": "string",
            "description": "The date this `GenomeMap` was published",
            "format": "date-time"
          },
          "scientificName": {
            "type": "string",
            "description": "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
            "example": "Zea mays"
          },
          "type": {
            "type": "string",
            "description": "The type of map this represents, usually \"Genetic\" or \"Physical\"",
            "example": "Genetic"
          },
          "unit": {
            "type": "string",
            "description": "The units used to describe the data in a `GenomeMap`",
            "example": "cM"
          }
        },
        "x-brapi-metadata": {
          "description": "The GenomeMap represents the metadata associated with a reference map of a particular species genome. A GenomeMap can either represent a physical map or genetic map.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "GenomeMap"
        }
      },
      "LinkageGroup": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "linkageGroupName": {
            "type": "string",
            "description": "The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
            "example": "Chromosome 3"
          },
          "markerCount": {
            "type": "integer",
            "description": "The number of markers associated with a `LinkageGroup`",
            "example": 150
          },
          "maxPosition": {
            "type": "integer",
            "description": "The maximum position of a marker within a `LinkageGroup`",
            "example": 2500
          }
        },
        "description": "a `LinkageGroup` is the generic term for a named section of a `GenomeMap`. A `LinkageGroup` can represent a Chromosome, Scaffold, or Linkage Group."
      },
      "ListValue": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `genotypeValue` or `genotypeMetadata`. Github issue number #491             \n<br>Repeated field of dynamically typed values.",
            "example": [
              "AA"
            ],
            "deprecated": true,
            "items": {
              "oneOf": [
                {
                  "type": "boolean",
                  "description": "Represents a boolean value.",
                  "format": "boolean"
                },
                {
                  "type": "number",
                  "description": "Represents a double value.",
                  "format": "double"
                },
                {
                  "type": "string",
                  "description": "Represents a string value."
                }
              ]
            }
          }
        },
        "description": "**Deprecated in v2.1** Please use `genotypeValue` or `genotypeMetadata`. Github issue number #491             \n<br>`ListValue` is a wrapper around a repeated field of values.\n<br>The JSON representation for `ListValue` is JSON array.",
        "deprecated": true
      },
      "MarkerPosition": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "linkageGroupName": {
            "type": "string",
            "description": "The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
            "example": "Chromosome 3"
          },
          "mapDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `GenomeMap`",
            "example": "3d52bdf3"
          },
          "mapName": {
            "type": "string",
            "description": "A human readable name for a `GenomeMap`",
            "example": "Genome Map 1"
          },
          "position": {
            "type": "integer",
            "description": "The position of a marker or variant within a `LinkageGroup`",
            "example": 2390
          },
          "variantDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Variant` within the given database server\n<br> A `Variant` can also represent a Marker ",
            "example": "a1eb250a"
          },
          "variantName": {
            "type": "string",
            "description": "The human readable name for a `Variant`\n<br> A `Variant` can also represent a Marker ",
            "example": "Marker_2390"
          }
        },
        "x-brapi-metadata": {
          "description": "A MarkerPosition describes a particular genetic marker at a specific position on a GenomeMap. A collection of MarkerPostions make up the data to represent a full GenomeMap.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "MarkerPosition"
        }
      },
      "MarkerPositionSearchRequest": {
        "type": "object",
        "properties": {
          "linkageGroupNames": {
            "type": "array",
            "description": "A list of Uniquely Identifiable linkage group names",
            "example": [
              "Chromosome 2",
              "Chromosome 3"
            ],
            "items": {
              "type": "string"
            }
          },
          "mapDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `GenomeMaps` within the given database server",
            "example": [
              "7e6fa8aa",
              "bedc418c"
            ],
            "items": {
              "type": "string"
            }
          },
          "maxPosition": {
            "type": "integer",
            "description": "The maximum position of markers in a given map",
            "example": 4000
          },
          "minPosition": {
            "type": "integer",
            "description": "The minimum position of markers in a given map",
            "example": 250
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "variantDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Variants` within the given database server",
            "example": [
              "a0caa928",
              "f8894a26"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Measurement": {
        "type": "object",
        "properties": {
          "units": {
            "type": "string",
            "description": "Units (example: \"ng/ul\")",
            "example": "ng/ul"
          },
          "value": {
            "type": "number",
            "description": "Value (example: \"2.3\")",
            "example": 2.3
          }
        },
        "description": "A value with units"
      },
      "MethodBaseClass": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "bibliographicalReference": {
            "type": "string",
            "description": "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
            "example": "Smith, 1893, Really Cool Paper, Popular Journal"
          },
          "description": {
            "type": "string",
            "description": "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
            "example": "A measuring tape was used"
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "formula": {
            "type": "string",
            "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
            "example": "a^2 + b^2 = c^2"
          },
          "methodClass": {
            "type": "string",
            "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
            "example": "Measurement"
          },
          "methodName": {
            "type": "string",
            "description": "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example": "Measuring Tape"
          },
          "methodPUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "example": "http://my-traits.com/trait/CO_123:0000212"
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          }
        },
        "description": "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
      },
      "ObservationUnitHierarchyLevel": {
        "title": "ObservationUnitHierarchyLevel",
        "type": "object",
        "properties": {
          "levelName": {
            "type": "string",
            "description": "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "example": "plot"
          },
          "levelOrder": {
            "type": "integer",
            "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "example": 2
          }
        },
        "description": "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. "
      },
      "OntologyReference": {
        "required": [
          "ontologyDbId",
          "ontologyName"
        ],
        "type": "object",
        "properties": {
          "documentationLinks": {
            "type": "array",
            "description": "links to various ontology documentation",
            "items": {
              "$ref": "#/components/schemas/MethodBaseClass_ontologyReference_documentationLinks"
            }
          },
          "ontologyDbId": {
            "type": "string",
            "description": "Ontology database unique identifier",
            "example": "6b071868"
          },
          "ontologyName": {
            "type": "string",
            "description": "Ontology name",
            "example": "The Crop Ontology"
          },
          "version": {
            "type": "string",
            "description": "Ontology version (no specific format)",
            "example": "7.2.3"
          }
        },
        "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
      },
      "OntologyTerm": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "Ontology term - the label of the ontology term the termId is pointing to.",
            "example": "sonic hedgehog"
          },
          "termURI": {
            "type": "string",
            "description": "Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.",
            "example": "MGI:MGI:98297"
          }
        },
        "description": "An ontology term describing an attribute."
      },
      "Plate": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "plateBarcode": {
            "type": "string",
            "description": "A unique identifier physically attached to a `Plate`",
            "example": "11223344"
          },
          "plateDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Plate`",
            "example": "a106467f"
          },
          "plateFormat": {
            "type": "string",
            "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "example": "PLATE_96",
            "enum": [
              "PLATE_96",
              "TUBES"
            ]
          },
          "plateName": {
            "type": "string",
            "description": "A human readable name for a `Plate`",
            "example": "Plate_123_XYZ"
          },
          "programDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Program` within the given database server",
            "example": "bd748e00"
          },
          "sampleType": {
            "type": "string",
            "description": "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "example": "TISSUE",
            "enum": [
              "DNA",
              "RNA",
              "TISSUE",
              "MIXED"
            ]
          },
          "studyDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Study` within the given database server",
            "example": "64bd6bf9"
          },
          "trialDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Trial` within the given database server",
            "example": "d34c5349"
          }
        },
        "x-brapi-metadata": {
          "description": "A Plate represents the metadata for a collection of Samples. The physical Plate being represented might be a plastic tray full of Samples, or a group of Samples stored in individual containers ie bags, test tubes, etc. Whatever the container is, the Samples in a Plate should be related by the same physical space, though they may or may not be related as part of the same experiment or analysis.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "Plate"
        }
      },
      "PlateFormat": {
        "type": "string",
        "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
        "example": "PLATE_96",
        "enum": [
          "PLATE_96",
          "TUBES"
        ]
      },
      "PlateNewRequest": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "plateBarcode": {
            "type": "string",
            "description": "A unique identifier physically attached to a `Plate`",
            "example": "11223344"
          },
          "plateFormat": {
            "type": "string",
            "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "example": "PLATE_96",
            "enum": [
              "PLATE_96",
              "TUBES"
            ]
          },
          "plateName": {
            "type": "string",
            "description": "A human readable name for a `Plate`",
            "example": "Plate_123_XYZ"
          },
          "programDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Program` within the given database server",
            "example": "bd748e00"
          },
          "sampleType": {
            "type": "string",
            "description": "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "example": "TISSUE",
            "enum": [
              "DNA",
              "RNA",
              "TISSUE",
              "MIXED"
            ]
          },
          "studyDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Study` within the given database server",
            "example": "64bd6bf9"
          },
          "trialDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Trial` within the given database server",
            "example": "d34c5349"
          }
        }
      },
      "PlateSearchRequest": {
        "type": "object",
        "properties": {
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a germplasm",
            "example": [
              "d745e1e2",
              "6dd28d74"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "List of human readable names to identify germplasm to search for",
            "example": [
              "A0000003",
              "A0000477"
            ],
            "items": {
              "type": "string"
            }
          },
          "observationUnitDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies an observation unit",
            "example": [
              "3cd0ca36",
              "983f3b14"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "plateBarcodes": {
            "type": "array",
            "description": "A unique identifier physically attached to the plate",
            "example": [
              "11223344",
              "55667788"
            ],
            "items": {
              "type": "string"
            }
          },
          "plateDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a plate of samples",
            "example": [
              "0cac98b8",
              "b96125fb"
            ],
            "items": {
              "type": "string"
            }
          },
          "plateNames": {
            "type": "array",
            "description": "The human readable name of a plate of samples",
            "example": [
              "0cac98b8",
              "b96125fb"
            ],
            "items": {
              "type": "string"
            }
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a sample",
            "example": [
              "3bece2ca",
              "dd286cc6"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleGroupDbIds": {
            "type": "array",
            "description": "The unique identifier for a group of related Samples",
            "example": [
              "45e1e2d7",
              "6cc6dd28"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleNames": {
            "type": "array",
            "description": "The human readable name of the sample",
            "example": [
              "SA_111",
              "SA_222"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Reference": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "commonCropName": {
            "type": "string",
            "description": "Common name for the crop",
            "example": "Maize"
          },
          "externalReferences": {
            "$ref": "#/components/schemas/ExternalReferences"
          },
          "isDerived": {
            "type": "boolean",
            "description": "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
            "format": "boolean",
            "example": false
          },
          "length": {
            "type": "integer",
            "description": "The length of this `Reference` sequence.",
            "example": 50000000
          },
          "md5checksum": {
            "type": "string",
            "description": "The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).",
            "example": "c2365e900c81a89cf74d83dab60df146"
          },
          "referenceDbId": {
            "type": "string",
            "description": "The unique identifier for a `Reference`",
            "example": "fc0a81d0"
          },
          "referenceName": {
            "type": "string",
            "description": "The human readable name of a `Reference` within a `ReferenceSet`.",
            "example": "Chromosome 2"
          },
          "referenceSetDbId": {
            "type": "string",
            "description": "The unique identifier for a `ReferenceSet`",
            "example": "c1ecfef1"
          },
          "referenceSetName": {
            "type": "string",
            "description": "The human readable name of a `ReferenceSet`",
            "example": "The Best Assembly Ever"
          },
          "sourceAccessions": {
            "type": "array",
            "description": "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.",
            "example": [
              "GCF_000001405.26"
            ],
            "items": {
              "type": "string"
            }
          },
          "sourceDivergence": {
            "type": "number",
            "description": "The `sourceDivergence` is the fraction of non-indel bases that do not match the `Reference` this message was derived from.",
            "format": "float",
            "example": 0.01
          },
          "sourceGermplasm": {
            "type": "array",
            "description": "All known corresponding Germplasm",
            "items": {
              "$ref": "#/components/schemas/Reference_sourceGermplasm"
            }
          },
          "sourceURI": {
            "type": "string",
            "description": "The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.",
            "example": "https://wiki.brapi.org/files/demo.fast"
          },
          "species": {
            "$ref": "#/components/schemas/OntologyTerm"
          }
        },
        "description": "A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.",
        "x-brapi-metadata": {
          "description": "A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "Reference"
        }
      },
      "ReferenceBases": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.",
            "example": "3a3d658a"
          },
          "offset": {
            "type": "integer",
            "description": "The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.",
            "example": 20000
          },
          "sequence": {
            "type": "string",
            "description": "A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.",
            "example": "TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT"
          }
        },
        "description": "A string representation of the `Reference` base alleles."
      },
      "ReferenceSet": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "assemblyPUI": {
            "type": "string",
            "description": "The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.",
            "example": "doi://10.12345/fake/9876"
          },
          "commonCropName": {
            "type": "string",
            "description": "Common name for the crop",
            "example": "Maize"
          },
          "description": {
            "type": "string",
            "description": "Optional free text description of this reference set.",
            "example": "This is an example description for an assembly"
          },
          "externalReferences": {
            "$ref": "#/components/schemas/ExternalReferences"
          },
          "isDerived": {
            "type": "boolean",
            "description": "A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).",
            "format": "boolean"
          },
          "md5checksum": {
            "type": "string",
            "description": "Order-independent MD5 checksum which identifies this `ReferenceSet`.\n\nTo compute this checksum, make a list of `Reference.md5checksum` for all\n`Reference` s in this set. Then sort that list, and take the MD5 hash of\nall the strings concatenated together. Express the hash as a lower-case\nhexadecimal string.",
            "example": "c2365e900c81a89cf74d83dab60df146"
          },
          "referenceSetDbId": {
            "type": "string",
            "description": "The unique identifier for a ReferenceSet",
            "example": "c1ecfef1"
          },
          "referenceSetName": {
            "type": "string",
            "description": "The human readable name of a ReferenceSet",
            "example": "The Best Assembly Ever"
          },
          "sourceAccessions": {
            "type": "array",
            "description": "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.",
            "example": [
              "A0000002",
              "A0009393"
            ],
            "items": {
              "type": "string"
            }
          },
          "sourceGermplasm": {
            "type": "array",
            "description": "All known corresponding Germplasm",
            "items": {
              "$ref": "#/components/schemas/ReferenceSet_sourceGermplasm"
            }
          },
          "sourceURI": {
            "type": "string",
            "description": "Specifies a FASTA format file/string.",
            "example": "https://wiki.brapi.org/files/demo.fast"
          },
          "species": {
            "$ref": "#/components/schemas/OntologyTerm"
          }
        },
        "description": "A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.",
        "x-brapi-metadata": {
          "description": "A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "ReferenceSet"
        }
      },
      "ReferenceSetsSearchRequest": {
        "type": "object",
        "properties": {
          "accessions": {
            "type": "array",
            "description": "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
            "example": [
              "A0009283",
              "A0006657"
            ],
            "items": {
              "type": "string"
            }
          },
          "assemblyPUIs": {
            "type": "array",
            "description": "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
            "example": [
              "doi:10.15454/312953986E3",
              "doi:10.15454/312953986E3"
            ],
            "items": {
              "type": "string"
            }
          },
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmDbIds": {
            "type": "array",
            "description": "List of IDs which uniquely identify germplasm to search for",
            "example": [
              "e9c6edd7",
              "1b1df4a6"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "List of human readable names to identify germplasm to search for",
            "example": [
              "A0000003",
              "A0000477"
            ],
            "items": {
              "type": "string"
            }
          },
          "md5checksums": {
            "type": "array",
            "description": "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
            "example": [
              "c2365e900c81a89cf74d83dab60df146"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceSetDbIds": {
            "type": "array",
            "description": "The `ReferenceSets` to search.",
            "example": [
              "32a19dd7",
              "2c182c18"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReferencesSearchRequest": {
        "type": "object",
        "properties": {
          "accessions": {
            "type": "array",
            "description": "If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).",
            "example": [
              "A0009283",
              "A0006657"
            ],
            "items": {
              "type": "string"
            }
          },
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmDbIds": {
            "type": "array",
            "description": "List of IDs which uniquely identify germplasm to search for",
            "example": [
              "e9c6edd7",
              "1b1df4a6"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "List of human readable names to identify germplasm to search for",
            "example": [
              "A0000003",
              "A0000477"
            ],
            "items": {
              "type": "string"
            }
          },
          "isDerived": {
            "type": "boolean",
            "description": "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
            "format": "boolean"
          },
          "maxLength": {
            "type": "integer",
            "description": "The minimum length of this `References` sequence.",
            "example": 90000
          },
          "md5checksums": {
            "type": "array",
            "description": "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
            "example": [
              "c2365e900c81a89cf74d83dab60df146"
            ],
            "items": {
              "type": "string"
            }
          },
          "minLength": {
            "type": "integer",
            "description": "The minimum length of this `References` sequence.",
            "example": 4000
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `References` within the given database server",
            "example": [
              "04c83ea7",
              "d0998a34"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `ReferenceSets` within the given database server",
            "example": [
              "32a19dd7",
              "2c182c18"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Sample": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "column": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "The Column identifier for this `Sample` location in the `Plate`",
            "example": 6
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "germplasmDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Germplasm`",
            "example": "7e08d538"
          },
          "observationUnitDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies an `ObservationUnit`",
            "example": "073a3ce5"
          },
          "plateDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Plate` of `Sample`",
            "example": "2dce16d1"
          },
          "plateName": {
            "type": "string",
            "description": "The human readable name of a `Plate`",
            "example": "Plate_alpha_20191022"
          },
          "programDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Program` within the given database server",
            "example": "bd748e00"
          },
          "row": {
            "type": "string",
            "description": "The Row identifier for this `Sample` location in the `Plate`",
            "example": "B"
          },
          "sampleBarcode": {
            "type": "string",
            "description": "A unique identifier physically attached to the `Sample`",
            "example": "3a027b59"
          },
          "sampleDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Sample`\n<br> MIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.",
            "example": "cd06a61d"
          },
          "sampleDescription": {
            "type": "string",
            "description": "Description of a `Sample`\n<br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.",
            "example": "This sample was taken from the root of a tree"
          },
          "sampleGroupDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a group of `Samples`",
            "example": "8524b436"
          },
          "sampleName": {
            "type": "string",
            "description": "The human readable name of the `Sample`",
            "example": "Sample_alpha_20191022"
          },
          "samplePUI": {
            "type": "string",
            "description": "A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)\n<br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ",
            "example": "doi:10.15454/312953986E3"
          },
          "sampleTimestamp": {
            "type": "string",
            "description": "The date and time a `Sample` was collected from the field\n<br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested",
            "format": "date-time"
          },
          "sampleType": {
            "type": "string",
            "description": "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "example": "Tissue"
          },
          "studyDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Study` within the given database server",
            "example": "64bd6bf9"
          },
          "takenBy": {
            "type": "string",
            "description": "The name or identifier of the entity which took the `Sample` from the field",
            "example": "Bob"
          },
          "tissueType": {
            "type": "string",
            "description": "The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n<br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
            "example": "Root"
          },
          "trialDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Trial` within the given database server",
            "example": "d34c5349"
          },
          "well": {
            "type": "string",
            "description": "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.",
            "example": "B6"
          }
        },
        "x-brapi-metadata": {
          "description": "The identifiers and metadata associated with a physical piece of biological material collected from the field for external analysis. A Sample can take many forms (leaf clipping, seed, DNA, etc) and might be used for a variety of analysis procedures (spectra, genotyping, etc).",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "Sample"
        }
      },
      "SampleNewRequest": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "column": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "The Column identifier for this `Sample` location in the `Plate`",
            "example": 6
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "germplasmDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Germplasm`",
            "example": "7e08d538"
          },
          "observationUnitDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies an `ObservationUnit`",
            "example": "073a3ce5"
          },
          "plateDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Plate` of `Sample`",
            "example": "2dce16d1"
          },
          "plateName": {
            "type": "string",
            "description": "The human readable name of a `Plate`",
            "example": "Plate_alpha_20191022"
          },
          "programDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Program` within the given database server",
            "example": "bd748e00"
          },
          "row": {
            "type": "string",
            "description": "The Row identifier for this `Sample` location in the `Plate`",
            "example": "B"
          },
          "sampleBarcode": {
            "type": "string",
            "description": "A unique identifier physically attached to the `Sample`",
            "example": "3a027b59"
          },
          "sampleDescription": {
            "type": "string",
            "description": "Description of a `Sample`\n<br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.",
            "example": "This sample was taken from the root of a tree"
          },
          "sampleGroupDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a group of `Samples`",
            "example": "8524b436"
          },
          "sampleName": {
            "type": "string",
            "description": "The human readable name of the `Sample`",
            "example": "Sample_alpha_20191022"
          },
          "samplePUI": {
            "type": "string",
            "description": "A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)\n<br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ",
            "example": "doi:10.15454/312953986E3"
          },
          "sampleTimestamp": {
            "type": "string",
            "description": "The date and time a `Sample` was collected from the field\n<br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested",
            "format": "date-time"
          },
          "sampleType": {
            "type": "string",
            "description": "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "example": "Tissue"
          },
          "studyDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Study` within the given database server",
            "example": "64bd6bf9"
          },
          "takenBy": {
            "type": "string",
            "description": "The name or identifier of the entity which took the `Sample` from the field",
            "example": "Bob"
          },
          "tissueType": {
            "type": "string",
            "description": "The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n<br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
            "example": "Root"
          },
          "trialDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Trial` within the given database server",
            "example": "d34c5349"
          },
          "well": {
            "type": "string",
            "description": "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.",
            "example": "B6"
          }
        }
      },
      "SampleSearchRequest": {
        "type": "object",
        "properties": {
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a `Germplasm`",
            "example": [
              "d745e1e2",
              "6dd28d74"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "List of human readable names to identify germplasm to search for",
            "example": [
              "A0000003",
              "A0000477"
            ],
            "items": {
              "type": "string"
            }
          },
          "observationUnitDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies an `ObservationUnit`",
            "example": [
              "3cd0ca36",
              "983f3b14"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "plateDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a `Plate` of `Samples`",
            "example": [
              "0cac98b8",
              "b96125fb"
            ],
            "items": {
              "type": "string"
            }
          },
          "plateNames": {
            "type": "array",
            "description": "The human readable name of a `Plate` of `Samples`",
            "example": [
              "0cac98b8",
              "b96125fb"
            ],
            "items": {
              "type": "string"
            }
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a `Sample`",
            "example": [
              "3bece2ca",
              "dd286cc6"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleGroupDbIds": {
            "type": "array",
            "description": "The unique identifier for a group of related `Samples`",
            "example": [
              "45e1e2d7",
              "6cc6dd28"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleNames": {
            "type": "array",
            "description": "The human readable name of the `Sample`",
            "example": [
              "SA_111",
              "SA_222"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScaleBaseClass": {
        "required": [
          "scaleName"
        ],
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "dataType": {
            "type": "string",
            "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
            "example": "Numerical",
            "enum": [
              "Code",
              "Date",
              "Duration",
              "Nominal",
              "Numerical",
              "Ordinal",
              "Text"
            ]
          },
          "decimalPlaces": {
            "type": "integer",
            "description": "For numerical, number of decimal places to be reported",
            "example": 2
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "scaleName": {
            "type": "string",
            "description": "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "example": "Meters"
          },
          "scalePUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "example": "http://my-traits.com/trait/CO_123:0000112"
          },
          "units": {
            "type": "string",
            "description": "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
            "example": "m"
          },
          "validValues": {
            "$ref": "#/components/schemas/ScaleBaseClass_validValues"
          }
        },
        "description": "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
      },
      "SearchRequestParametersCommonCropNames": {
        "type": "object",
        "properties": {
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersExternalReferences": {
        "type": "object",
        "properties": {
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersGermplasm": {
        "type": "object",
        "properties": {
          "germplasmDbIds": {
            "type": "array",
            "description": "List of IDs which uniquely identify germplasm to search for",
            "example": [
              "e9c6edd7",
              "1b1df4a6"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "List of human readable names to identify germplasm to search for",
            "example": [
              "A0000003",
              "A0000477"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersLocations": {
        "type": "object",
        "properties": {
          "locationDbIds": {
            "type": "array",
            "description": "The location ids to search for",
            "example": [
              "b28911cf",
              "5071d1e4"
            ],
            "items": {
              "type": "string"
            }
          },
          "locationNames": {
            "type": "array",
            "description": "A human readable names to search for",
            "example": [
              "Location Alpha",
              "The Large Hadron Collider"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersObservationVariables": {
        "type": "object",
        "properties": {
          "observationVariableDbIds": {
            "type": "array",
            "description": "The DbIds of Variables to search for",
            "example": [
              "a646187d",
              "6d23513b"
            ],
            "items": {
              "type": "string"
            }
          },
          "observationVariableNames": {
            "type": "array",
            "description": "The names of Variables to search for",
            "example": [
              "Plant Height in meters",
              "Wheat rust score 1-5"
            ],
            "items": {
              "type": "string"
            }
          },
          "observationVariablePUIs": {
            "type": "array",
            "description": "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
            "example": [
              "http://my-traits.com/trait/CO_123:0008012",
              "http://my-traits.com/trait/CO_123:0007261"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersPaging": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          }
        }
      },
      "SearchRequestParametersPrograms": {
        "type": "object",
        "properties": {
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersStudies": {
        "type": "object",
        "properties": {
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersTokenPaging": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "pageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "example": "33c27874",
            "deprecated": true
          }
        }
      },
      "SearchRequestParametersTrials": {
        "type": "object",
        "properties": {
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchRequestParametersVariableBaseClass": {
        "type": "object",
        "properties": {
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "dataTypes": {
            "type": "array",
            "description": "List of scale data types to filter search results",
            "example": [
              "Numerical",
              "Ordinal",
              "Text"
            ],
            "items": {
              "type": "string",
              "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "example": "Numerical",
              "enum": [
                "Code",
                "Date",
                "Duration",
                "Nominal",
                "Numerical",
                "Ordinal",
                "Text"
              ]
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "methodDbIds": {
            "type": "array",
            "description": "List of methods to filter search results",
            "example": [
              "07e34f83",
              "d3d5517a"
            ],
            "items": {
              "type": "string"
            }
          },
          "methodNames": {
            "type": "array",
            "description": "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example": [
              "Measuring Tape",
              "Spectrometer"
            ],
            "items": {
              "type": "string"
            }
          },
          "methodPUIs": {
            "type": "array",
            "description": "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "example": [
              "http://my-traits.com/trait/CO_123:0000212",
              "http://my-traits.com/trait/CO_123:0003557"
            ],
            "items": {
              "type": "string"
            }
          },
          "ontologyDbIds": {
            "type": "array",
            "description": "List of ontology IDs to search for",
            "example": [
              "f44f7b23",
              "a26b576e"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "scaleDbIds": {
            "type": "array",
            "description": "The unique identifier for a Scale",
            "example": [
              "a13ecffa",
              "7e1afe4f"
            ],
            "items": {
              "type": "string"
            }
          },
          "scaleNames": {
            "type": "array",
            "description": "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "example": [
              "Meters",
              "Liters"
            ],
            "items": {
              "type": "string"
            }
          },
          "scalePUIs": {
            "type": "array",
            "description": "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "example": [
              "http://my-traits.com/trait/CO_123:0000336",
              "http://my-traits.com/trait/CO_123:0000560"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbId": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
            "example": [
              "5bcac0ae",
              "7f48e22d"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitAttributePUIs": {
            "type": "array",
            "description": "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example": [
              "http://my-traits.com/trait/CO_123:0008336",
              "http://my-traits.com/trait/CO_123:0001092"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitAttributes": {
            "type": "array",
            "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example": [
              "Height",
              "Color"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitClasses": {
            "type": "array",
            "description": "List of trait classes to filter search results",
            "example": [
              "morphological",
              "phenological",
              "agronomical"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitDbIds": {
            "type": "array",
            "description": "The unique identifier for a Trait",
            "example": [
              "ef81147b",
              "78d82fad"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitEntities": {
            "type": "array",
            "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "example": [
              "Stalk",
              "Root"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitEntityPUIs": {
            "type": "array",
            "description": "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "example": [
              "http://my-traits.com/trait/CO_123:0004098",
              "http://my-traits.com/trait/CO_123:0002366"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitNames": {
            "type": "array",
            "description": "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example": [
              "Stalk Height",
              "Root Color"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitPUIs": {
            "type": "array",
            "description": "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "example": [
              "http://my-traits.com/trait/CO_123:0000456",
              "http://my-traits.com/trait/CO_123:0000820"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TraitBaseClass": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "alternativeAbbreviations": {
            "type": "array",
            "description": "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
            "example": [
              "H",
              "PH",
              "H1"
            ],
            "items": {
              "type": "string"
            }
          },
          "attribute": {
            "type": "string",
            "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example": "height"
          },
          "attributePUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example": "http://my-traits.com/trait/PO:00012345"
          },
          "entity": {
            "type": "string",
            "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "example": "Stalk"
          },
          "entityPUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "example": "http://my-traits.com/trait/PATO:00098765"
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "mainAbbreviation": {
            "type": "string",
            "description": "A shortened version of the human readable name for a Trait",
            "example": "PH"
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "status": {
            "type": "string",
            "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "example": "recommended"
          },
          "synonyms": {
            "type": "array",
            "description": "Other trait names",
            "example": [
              "Height",
              "Plant Height",
              "Stalk Height",
              "Canopy Height"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitClass": {
            "type": "string",
            "description": "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
            "example": "phenological"
          },
          "traitDescription": {
            "type": "string",
            "description": "The description of a trait",
            "example": "The height of the plant"
          },
          "traitName": {
            "type": "string",
            "description": "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example": "Height"
          },
          "traitPUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "example": "http://my-traits.com/trait/CO_123:0000012"
          }
        },
        "description": "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
      },
      "TraitDataType": {
        "type": "string",
        "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
        "example": "Numerical",
        "enum": [
          "Code",
          "Date",
          "Duration",
          "Nominal",
          "Numerical",
          "Ordinal",
          "Text"
        ]
      },
      "VariableBaseClass": {
        "required": [
          "method",
          "scale",
          "trait"
        ],
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "commonCropName": {
            "type": "string",
            "description": "Crop name (examples: \"Maize\", \"Wheat\")",
            "example": "Maize"
          },
          "contextOfUse": {
            "type": "array",
            "description": "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
            "example": [
              "Trial evaluation",
              "Nursery evaluation"
            ],
            "items": {
              "type": "string"
            }
          },
          "defaultValue": {
            "type": "string",
            "description": "Variable default value. (examples: \"red\", \"2.3\", etc.)",
            "example": "2.0"
          },
          "documentationURL": {
            "type": "string",
            "description": "A URL to the human readable documentation of an object",
            "format": "uri",
            "example": "https://wiki.brapi.org/documentation.html"
          },
          "externalReferences": {
            "$ref": "#/components/schemas/ExternalReferences"
          },
          "growthStage": {
            "type": "string",
            "description": "Growth stage at which measurement is made (examples: \"flowering\")",
            "example": "flowering"
          },
          "institution": {
            "type": "string",
            "description": "Name of institution submitting the variable",
            "example": "The BrAPI Institute"
          },
          "language": {
            "type": "string",
            "description": "2 letter ISO 639-1 code for the language of submission of the variable.",
            "example": "en"
          },
          "method": {
            "$ref": "#/components/schemas/VariableBaseClass_method"
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/OntologyReference"
          },
          "scale": {
            "$ref": "#/components/schemas/VariableBaseClass_scale"
          },
          "scientist": {
            "type": "string",
            "description": "Name of scientist submitting the variable.",
            "example": "Dr. Bob Robertson"
          },
          "status": {
            "type": "string",
            "description": "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "example": "recommended"
          },
          "submissionTimestamp": {
            "type": "string",
            "description": "Timestamp when the Variable was added (ISO 8601)",
            "format": "date-time"
          },
          "synonyms": {
            "type": "array",
            "description": "Other variable names",
            "example": [
              "Maize Height",
              "Stalk Height",
              "Corn Height"
            ],
            "items": {
              "type": "string"
            }
          },
          "trait": {
            "$ref": "#/components/schemas/VariableBaseClass_trait"
          }
        }
      },
      "Variant": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "alternateBases": {
            "type": "array",
            "description": "The bases that appear instead of the reference bases. Multiple alternate alleles are possible.",
            "example": [
              "T",
              "TAC"
            ],
            "items": {
              "type": "string"
            }
          },
          "alternate_bases": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `alternateBases`. Github issue number #549\n<br>The bases that appear instead of the reference bases. Multiple alternate alleles are possible.",
            "example": [
              "T",
              "TAC"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "ciend": {
            "type": "array",
            "description": "Similar to \"cipos\", but for the variant's end position (which is derived from start + svlen).",
            "example": [
              -1000,
              0
            ],
            "items": {
              "type": "integer"
            }
          },
          "cipos": {
            "type": "array",
            "description": "In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. \"cipos\" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCF v4.2",
            "example": [
              -12000,
              1000
            ],
            "items": {
              "type": "integer"
            }
          },
          "created": {
            "type": "string",
            "description": "The timestamp when this variant was created.",
            "format": "date-time"
          },
          "end": {
            "type": "integer",
            "description": "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n<br>The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`.",
            "example": 518
          },
          "externalReferences": {
            "$ref": "#/components/schemas/ExternalReferences"
          },
          "filtersApplied": {
            "type": "boolean",
            "description": "True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value.",
            "format": "boolean",
            "example": true
          },
          "filtersFailed": {
            "type": "array",
            "description": "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record.",
            "example": [
              "d629a669",
              "3f14f578"
            ],
            "items": {
              "type": "string"
            }
          },
          "filtersPassed": {
            "type": "boolean",
            "description": "True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS.",
            "format": "boolean",
            "example": true
          },
          "referenceBases": {
            "type": "string",
            "description": "The reference bases for this variant. They start at the given start position.",
            "example": "A"
          },
          "referenceDbId": {
            "type": "string",
            "description": "The unique identifier for a Reference",
            "example": "fc0a81d0"
          },
          "referenceName": {
            "type": "string",
            "description": "The reference on which this variant occurs. (e.g. `chr_20` or `X`)",
            "example": "chr_20"
          },
          "referenceSetDbId": {
            "type": "string",
            "description": "The unique identifier for a ReferenceSet",
            "example": "c1ecfef1"
          },
          "referenceSetName": {
            "type": "string",
            "description": "The human readable name of the ReferenceSet",
            "example": "The Best Assembly Ever"
          },
          "start": {
            "type": "integer",
            "description": "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n<br> The start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0).",
            "example": 500
          },
          "svlen": {
            "type": "integer",
            "description": "Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2",
            "example": 1500
          },
          "updated": {
            "type": "string",
            "description": "The time at which this variant was last updated.",
            "format": "date-time"
          },
          "variantDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Variant`",
            "example": "628e89c5"
          },
          "variantNames": {
            "type": "array",
            "description": "A human readable name associated with a `Variant`",
            "example": [
              "RefSNP_ID_1",
              "06ea312e"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbId": {
            "type": "array",
            "description": "An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.",
            "example": [
              "c8ae400b",
              "ef2c204b"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantType": {
            "type": "string",
            "description": "The \"variant_type\" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following \"start\"\n  DEL  : deletion of sequence following \"start\"",
            "example": "DUP"
          }
        },
        "description": "A `Variant` represents a change in DNA sequence relative to some reference. For example, a variant could represent a classic marker, a SNP, or an insertion. This is equivalent to a row in VCF.",
        "x-brapi-metadata": {
          "description": "A `Variant` represents a change in DNA sequence relative to some reference. For example, a variant could represent a classic marker, a SNP, or an insertion. This is equivalent to a row in VCF.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "Variant"
        }
      },
      "VariantSet": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "analysis": {
            "type": "array",
            "description": "Set of Analysis descriptors for this VariantSet",
            "items": {
              "$ref": "#/components/schemas/Analysis"
            }
          },
          "availableFormats": {
            "type": "array",
            "description": "When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n<br/>'dataFormat' defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n<br/>'fileFormat' defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
            "items": {
              "$ref": "#/components/schemas/AvailableFormat"
            }
          },
          "callSetCount": {
            "type": "integer",
            "description": "The number of CallSets included in this VariantSet",
            "example": 341
          },
          "externalReferences": {
            "$ref": "#/components/schemas/ExternalReferences"
          },
          "metadataFields": {
            "type": "array",
            "description": "The 'metadataFields' array indicates which types of genotyping data and metadata are available in the VariantSet. \n<br> When possible, these field names and abbreviations should follow the VCF standard ",
            "items": {
              "$ref": "#/components/schemas/VariantSet_metadataFields"
            }
          },
          "referenceSetDbId": {
            "type": "string",
            "description": "The ID of the reference set that describes the sequences used by the variants in this set.",
            "example": "57eae639"
          },
          "studyDbId": {
            "type": "string",
            "description": "The ID of the dataset this variant set belongs to.",
            "example": "2fc3b034"
          },
          "variantCount": {
            "type": "integer",
            "description": "The number of Variants included in this VariantSet",
            "example": 250
          },
          "variantSetDbId": {
            "type": "string",
            "description": "The unique identifier for a VariantSet",
            "example": "87a6ac1e"
          },
          "variantSetName": {
            "type": "string",
            "description": "The human readable name for a VariantSet",
            "example": "Maize QC DataSet 002334"
          }
        },
        "description": "A VariantSet is a collection of variants and variant calls intended to be analyzed together.",
        "x-brapi-metadata": {
          "description": "A VariantSet is a collection of variants and variant calls intended to be analyzed together.",
          "module": "BrAPI-Genotyping",
          "primaryModel": true,
          "title": "Variant"
        }
      },
      "VariantSetsExtractRequest": {
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "The CallSet to search.",
            "example": [
              "9569cfc4",
              "da1e888c"
            ],
            "items": {
              "type": "string"
            }
          },
          "expandHomozygotes": {
            "type": "boolean",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example": true
          },
          "sepPhased": {
            "type": "string",
            "description": "The string used as a separator for phased allele calls.",
            "example": "~"
          },
          "sepUnphased": {
            "type": "string",
            "description": "The string used as a separator for unphased allele calls.",
            "example": "|"
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "unknownString": {
            "type": "string",
            "description": "The string used as a representation for missing data.",
            "example": "-"
          },
          "variantDbIds": {
            "type": "array",
            "description": "The Variant to search.",
            "example": [
              "c80f068b",
              "eb7c5f50"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "The VariantSet to search.",
            "example": [
              "b2903842",
              "dcbb8558"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Request object for extracting data subsets as new Variant Sets"
      },
      "VariantSetsSearchRequest": {
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "The unique identifier representing a CallSet",
            "example": [
              "9569cfc4",
              "da1e888c"
            ],
            "items": {
              "type": "string"
            }
          },
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceDbIds": {
            "type": "array",
            "description": "The unique identifier representing a genotype Reference",
            "example": [
              "89ab4d17",
              "74d3b63d"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceSetDbIds": {
            "type": "array",
            "description": "The unique identifier representing a genotype ReferenceSet",
            "example": [
              "d3b63d4d",
              "3b63d74b"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantDbIds": {
            "type": "array",
            "description": "The unique identifier representing a Variant",
            "example": [
              "c80f068b",
              "eb7c5f50"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "The unique identifier representing a VariantSet",
            "example": [
              "b2903842",
              "dcbb8558"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VendorContact": {
        "required": [
          "vendorName"
        ],
        "type": "object",
        "properties": {
          "vendorAddress": {
            "type": "string",
            "description": "The street address of the vendor",
            "example": "123 Main Street"
          },
          "vendorCity": {
            "type": "string",
            "description": "The name of the city where the vendor is located",
            "example": "Townsville"
          },
          "vendorContactName": {
            "type": "string",
            "description": "The name or identifier of the primary vendor contact",
            "example": "Bob Robertson"
          },
          "vendorCountry": {
            "type": "string",
            "description": "The name of the country where the vendor is located",
            "example": "USA"
          },
          "vendorDescription": {
            "type": "string",
            "description": "A description of the vendor",
            "example": "This is a sequencing vendor. Sequencing happens here."
          },
          "vendorEmail": {
            "type": "string",
            "description": "The primary email address used to contact the vendor",
            "example": "bob@bob.org"
          },
          "vendorName": {
            "type": "string",
            "description": "The human readable name of the vendor",
            "example": "The Example Vendor Lab"
          },
          "vendorPhone": {
            "type": "string",
            "description": "The primary phone number used to contact the vendor",
            "example": "+1-800-555-5555"
          },
          "vendorURL": {
            "type": "string",
            "description": "The primary URL for the vendor",
            "example": "https://sequencing.org/vendor"
          }
        }
      },
      "VendorOrder": {
        "required": [
          "clientId",
          "numberOfSamples",
          "orderId",
          "serviceIds"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.",
            "example": "7b51ad15"
          },
          "numberOfSamples": {
            "type": "integer",
            "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example": 180
          },
          "orderId": {
            "type": "string",
            "description": "The order id returned by the vendor when the order was successfully submitted.",
            "example": "96ba0ca3"
          },
          "requiredServiceInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of additional data required by the requested service. This includes things like Volume and Concentration.",
            "example": {
              "extractDNA": "true",
              "genus": "Zea",
              "species": "mays",
              "volumePerWell": "2.3 ml"
            }
          },
          "serviceIds": {
            "type": "array",
            "description": "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.",
            "example": [
              "e8f60f64",
              "05bd925a",
              "b698fb5e"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The details of a vendor order"
      },
      "VendorOrderSubmission": {
        "required": [
          "orderId"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "A unique, alpha-numeric ID which identifies the order",
            "example": "b5144468"
          },
          "shipmentForms": {
            "type": "array",
            "description": "Array of paper forms which need to be printed and included with the physical shipment",
            "items": {
              "$ref": "#/components/schemas/ShipmentForm"
            }
          }
        },
        "description": "Response to an order request"
      },
      "VendorOrderSubmissionRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
            "example": "b8aac350"
          },
          "numberOfSamples": {
            "type": "integer",
            "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example": 180
          },
          "plates": {
            "type": "array",
            "description": "Array of new plates to be submitted to a vendor",
            "items": {
              "$ref": "#/components/schemas/VendorOrderSubmissionRequest_plates"
            }
          },
          "requiredServiceInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of additional data required by the requested service. This includes things like Volume and Concentration.",
            "example": {
              "extractDNA": true,
              "genus": "Zea",
              "species": "mays",
              "volumePerWell": "2.3 ml"
            }
          },
          "sampleType": {
            "type": "string",
            "description": "The type of Samples being submitted",
            "example": "Tissue",
            "enum": [
              "DNA",
              "RNA",
              "Tissue"
            ]
          },
          "serviceIds": {
            "type": "array",
            "description": "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.",
            "example": [
              "e8f60f64",
              "05bd925a",
              "b698fb5e"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Request object structure to submit plate data to a vendor"
      },
      "VendorPlate": {
        "type": "object",
        "properties": {
          "clientPlateBarcode": {
            "type": "string",
            "description": "(Optional) The value of the bar code attached to this plate",
            "example": "31dd5787"
          },
          "clientPlateId": {
            "type": "string",
            "description": "The ID which uniquely identifies this plate to the client making the request",
            "example": "0ad6c0ef"
          },
          "sampleSubmissionFormat": {
            "$ref": "#/components/schemas/PlateFormat"
          },
          "samples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorSample"
            }
          }
        }
      },
      "VendorPlateSubmission": {
        "required": [
          "clientId",
          "numberOfSamples",
          "plates"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
            "example": "e470ae0d"
          },
          "numberOfSamples": {
            "type": "integer",
            "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example": 180
          },
          "plates": {
            "type": "array",
            "description": "Array of new plates to be submitted to a vendor",
            "items": {
              "$ref": "#/components/schemas/VendorPlateSubmission_plates"
            }
          }
        },
        "description": "Response of a plate submission"
      },
      "VendorPlateSubmissionId": {
        "required": [
          "submissionId"
        ],
        "type": "object",
        "properties": {
          "submissionId": {
            "type": "string",
            "description": "A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.",
            "example": "f8f409e0"
          }
        },
        "description": "Response to an order request"
      },
      "VendorPlateSubmissionRequest": {
        "required": [
          "clientId",
          "numberOfSamples",
          "plates",
          "sampleType"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
            "example": "b8aac350"
          },
          "numberOfSamples": {
            "type": "integer",
            "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example": 180
          },
          "plates": {
            "type": "array",
            "description": "Array of new plates to be submitted to a vendor",
            "items": {
              "$ref": "#/components/schemas/VendorOrderSubmissionRequest_plates"
            }
          },
          "sampleType": {
            "type": "string",
            "description": "The type of Samples being submitted",
            "example": "Tissue",
            "enum": [
              "DNA",
              "RNA",
              "Tissue"
            ]
          }
        },
        "description": "Request object structure to submit plate data to a vendor"
      },
      "VendorResultFile": {
        "required": [
          "clientSampleIds",
          "fileName",
          "fileType",
          "fileURL"
        ],
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "clientSampleIds": {
            "type": "array",
            "description": "The list of sampleDbIds included in the file",
            "example": [
              "3968733e",
              "e0de6391",
              "66854172"
            ],
            "items": {
              "type": "string"
            }
          },
          "fileName": {
            "type": "string",
            "description": "Name of the file",
            "example": "sequence_data_ce640bd3.csv"
          },
          "fileType": {
            "type": "string",
            "description": "Format of the file",
            "example": "text/csv"
          },
          "fileURL": {
            "type": "string",
            "description": "The URL to a file with the results of a vendor analysis",
            "format": "uri",
            "example": "https://vendor.org/data/sequence_data_ce640bd3.csv"
          },
          "md5sum": {
            "type": "string",
            "description": "MD5 Hash Check Sum for the file to confirm download without error",
            "example": "c2365e900c81a89cf74d83dab60df146"
          }
        }
      },
      "VendorSample": {
        "required": [
          "clientSampleId"
        ],
        "type": "object",
        "properties": {
          "clientSampleBarCode": {
            "type": "string",
            "description": "(Optional) The value of the bar code attached to this sample",
            "example": "7c07e527"
          },
          "clientSampleId": {
            "type": "string",
            "description": "The ID which uniquely identifies this sample to the client making the request",
            "example": "bd96bd69"
          },
          "column": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "The Column identifier for this samples location in the plate",
            "example": 6
          },
          "comments": {
            "type": "string",
            "description": "Generic comments about this sample for the vendor",
            "example": "This is my favorite sample, please be extra careful with it."
          },
          "concentration": {
            "$ref": "#/components/schemas/VendorOrderSubmissionRequest_concentration"
          },
          "organismName": {
            "type": "string",
            "description": "Scientific organism name",
            "example": "Aspergillus fructus"
          },
          "row": {
            "type": "string",
            "description": "The Row identifier for this samples location in the plate",
            "example": "B"
          },
          "speciesName": {
            "type": "string",
            "description": "Scientific species name",
            "example": "Aspergillus fructus"
          },
          "taxonomyOntologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "tissueType": {
            "type": "string",
            "description": "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
            "example": "Root"
          },
          "tissueTypeOntologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "volume": {
            "$ref": "#/components/schemas/VendorOrderSubmissionRequest_concentration"
          },
          "well": {
            "type": "string",
            "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
            "example": "B6"
          }
        }
      },
      "VendorSpecification": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "services": {
            "type": "array",
            "description": "List of platform specifications available at the vendor",
            "items": {
              "$ref": "#/components/schemas/VendorSpecificationService"
            }
          },
          "vendorContact": {
            "$ref": "#/components/schemas/VendorContact"
          }
        }
      },
      "VendorSpecificationService": {
        "required": [
          "serviceId",
          "serviceName"
        ],
        "type": "object",
        "properties": {
          "serviceDescription": {
            "type": "string",
            "description": "Description of the vendor platform",
            "example": "A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines."
          },
          "serviceId": {
            "type": "string",
            "description": "Unique identifier for this service",
            "example": "085d298f"
          },
          "serviceName": {
            "type": "string",
            "description": "The human readable name of a platform",
            "example": "The Deluxe Service"
          },
          "servicePlatformMarkerType": {
            "type": "string",
            "description": "The type of markers used in this services platform",
            "example": "FIXED",
            "enum": [
              "FIXED",
              "DISCOVERABLE"
            ]
          },
          "servicePlatformName": {
            "type": "string",
            "description": "The technology platform used by this service",
            "example": "RNA-seq"
          },
          "specificRequirements": {
            "type": "array",
            "description": "Additional arbitrary requirements for a particular platform",
            "example": [
              {
                "description": "The genus of the samples",
                "key": "genus"
              },
              {
                "description": "The species of the samples",
                "key": "species"
              },
              {
                "description": "Approximate volume of each sample (ex 2.3 ml)",
                "key": "volumePerWell"
              },
              {
                "description": "Does DNA extraction need to happen before sequencing (ex true)",
                "key": "extractDNA"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/VendorSpecificationService_specificRequirements"
            }
          }
        }
      },
      "basePagination": {
        "required": [
          "currentPage",
          "pageSize"
        ],
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "description": "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example": 0,
            "default": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example": 1000,
            "default": 1000
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of elements that are available on the server and match the requested query parameters.",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example": 1
          }
        },
        "description": "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
      },
      "callSetsSearchRequest": {
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `CallSets` within the given database server",
            "example": [
              "6c7486b2",
              "49c36a73"
            ],
            "items": {
              "type": "string"
            }
          },
          "callSetNames": {
            "type": "array",
            "description": "A list of human readable names associated with `CallSets`",
            "example": [
              "Sample_123_DNA_Run_456",
              "Sample_789_DNA_Run_101"
            ],
            "items": {
              "type": "string"
            }
          },
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmDbIds": {
            "type": "array",
            "description": "List of IDs which uniquely identify germplasm to search for",
            "example": [
              "e9c6edd7",
              "1b1df4a6"
            ],
            "items": {
              "type": "string"
            }
          },
          "germplasmNames": {
            "type": "array",
            "description": "List of human readable names to identify germplasm to search for",
            "example": [
              "A0000003",
              "A0000477"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Samples` within the given database server",
            "example": [
              "758d3f6d",
              "39c0a3f7"
            ],
            "items": {
              "type": "string"
            }
          },
          "sampleNames": {
            "type": "array",
            "description": "A list of human readable names associated with `Samples`",
            "example": [
              "Sample_123",
              "Sample_789"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `VariantSets` within the given database server",
            "example": [
              "8a9a8972",
              "32a2649a"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "dataFile": {
        "required": [
          "fileURL"
        ],
        "type": "object",
        "properties": {
          "fileDescription": {
            "type": "string",
            "description": "A human readable description of the file contents",
            "example": "This is an Excel data file"
          },
          "fileMD5Hash": {
            "type": "string",
            "description": "The MD5 Hash of the file contents to be used as a check sum",
            "example": "c2365e900c81a89cf74d83dab60df146"
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file",
            "example": "datafile.xlsx"
          },
          "fileSize": {
            "type": "integer",
            "description": "The size of the file in bytes",
            "example": 4398
          },
          "fileType": {
            "type": "string",
            "description": "The type or format of the file. Preferably MIME Type.",
            "example": "application/vnd.ms-excel"
          },
          "fileURL": {
            "type": "string",
            "description": "The absolute URL where the file is located",
            "format": "uri",
            "example": "https://wiki.brapi.org/examples/datafile.xlsx"
          }
        },
        "description": "A dataFile contains a URL and the relevant file metadata to represent a file"
      },
      "geoJSON": {
        "title": "GeoJSON",
        "type": "object",
        "properties": {
          "geometry": {
            "title": "GeoJSON Geometry",
            "type": "object",
            "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
            "example": {
              "coordinates": [
                -76.506042,
                42.417373,
                123
              ],
              "type": "Point"
            },
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "Point": "#/components/schemas/pointGeometry",
                "Polygon": "#/components/schemas/polygonGeometry"
              }
            },
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "coordinates": {
                    "minItems": 2,
                    "type": "array",
                    "description": "A single position",
                    "example": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "items": {
                      "type": "number"
                    }
                  },
                  "type": {
                    "type": "string",
                    "description": "The literal string \"Point\"",
                    "example": "Point",
                    "default": "Point"
                  }
                },
                "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
              },
              {
                "type": "object",
                "properties": {
                  "coordinates": {
                    "type": "array",
                    "description": "An array of linear rings",
                    "example": [
                      [
                        [
                          -77.456654,
                          42.241133,
                          494
                        ],
                        [
                          -75.414133,
                          41.508282,
                          571
                        ],
                        [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        [
                          -77.456654,
                          42.241133,
                          346
                        ]
                      ]
                    ],
                    "items": {
                      "minItems": 4,
                      "type": "array",
                      "description": "An array of at least four positions where the first equals the last",
                      "example": [
                        [
                          -77.456654,
                          42.241133,
                          494
                        ],
                        [
                          -75.414133,
                          41.508282,
                          571
                        ],
                        [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        [
                          -77.456654,
                          42.241133,
                          346
                        ]
                      ],
                      "items": {
                        "minItems": 2,
                        "type": "array",
                        "description": "A single position",
                        "example": [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "description": "The literal string \"Polygon\"",
                    "example": "Polygon",
                    "default": "Polygon"
                  }
                },
                "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The literal string \"Feature\"",
            "example": "Feature",
            "default": "Feature"
          }
        },
        "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      },
      "geoJSONSearchArea": {
        "title": "GeoJSONSearchArea",
        "type": "object",
        "properties": {
          "geometry": {
            "title": "GeoJSON Geometry",
            "type": "object",
            "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
            "example": {
              "coordinates": [
                -76.506042,
                42.417373,
                123
              ],
              "type": "Point"
            },
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "Point": "#/components/schemas/pointGeometry",
                "Polygon": "#/components/schemas/polygonGeometry"
              }
            },
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "coordinates": {
                    "minItems": 2,
                    "type": "array",
                    "description": "A single position",
                    "example": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "items": {
                      "type": "number"
                    }
                  },
                  "type": {
                    "type": "string",
                    "description": "The literal string \"Point\"",
                    "example": "Point",
                    "default": "Point"
                  }
                },
                "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
              },
              {
                "type": "object",
                "properties": {
                  "coordinates": {
                    "type": "array",
                    "description": "An array of linear rings",
                    "example": [
                      [
                        [
                          -77.456654,
                          42.241133,
                          494
                        ],
                        [
                          -75.414133,
                          41.508282,
                          571
                        ],
                        [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        [
                          -77.456654,
                          42.241133,
                          346
                        ]
                      ]
                    ],
                    "items": {
                      "minItems": 4,
                      "type": "array",
                      "description": "An array of at least four positions where the first equals the last",
                      "example": [
                        [
                          -77.456654,
                          42.241133,
                          494
                        ],
                        [
                          -75.414133,
                          41.508282,
                          571
                        ],
                        [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        [
                          -77.456654,
                          42.241133,
                          346
                        ]
                      ],
                      "items": {
                        "minItems": 2,
                        "type": "array",
                        "description": "A single position",
                        "example": [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        "items": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "description": "The literal string \"Polygon\"",
                    "example": "Polygon",
                    "default": "Polygon"
                  }
                },
                "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The literal string \"Feature\"",
            "example": "Feature",
            "default": "Feature"
          }
        },
        "description": "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
        "example": {
          "geometry": {
            "coordinates": [
              [
                [
                  -77.456654,
                  42.241133
                ],
                [
                  -75.414133,
                  41.508282
                ],
                [
                  -76.506042,
                  42.417373
                ],
                [
                  -77.456654,
                  42.241133
                ]
              ]
            ],
            "type": "Polygon"
          },
          "type": "Feature"
        }
      },
      "linearRing": {
        "minItems": 4,
        "type": "array",
        "description": "An array of at least four positions where the first equals the last",
        "example": [
          [
            -77.456654,
            42.241133,
            494
          ],
          [
            -75.414133,
            41.508282,
            571
          ],
          [
            -76.506042,
            42.417373,
            123
          ],
          [
            -77.456654,
            42.241133,
            346
          ]
        ],
        "items": {
          "minItems": 2,
          "type": "array",
          "description": "A single position",
          "example": [
            -76.506042,
            42.417373,
            123
          ],
          "items": {
            "type": "number"
          }
        }
      },
      "metadata": {
        "type": "object",
        "properties": {
          "datafiles": {
            "type": "array",
            "description": "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/metadata_datafiles"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/metadata_pagination"
          },
          "status": {
            "type": "array",
            "description": "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items": {
              "$ref": "#/components/schemas/metadata_status"
            }
          }
        },
        "description": "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
      },
      "metadataBase": {
        "type": "object",
        "properties": {
          "datafiles": {
            "type": "array",
            "description": "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/metadata_datafiles"
            }
          },
          "status": {
            "type": "array",
            "description": "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items": {
              "$ref": "#/components/schemas/metadata_status"
            }
          }
        },
        "description": "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
      },
      "metadataTokenPagination": {
        "type": "object",
        "properties": {
          "datafiles": {
            "type": "array",
            "description": "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/metadata_datafiles"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/metadataTokenPagination_pagination"
          },
          "status": {
            "type": "array",
            "description": "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items": {
              "$ref": "#/components/schemas/metadata_status"
            }
          }
        },
        "description": "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
      },
      "pointGeometry": {
        "type": "object",
        "properties": {
          "coordinates": {
            "minItems": 2,
            "type": "array",
            "description": "A single position",
            "example": [
              -76.506042,
              42.417373,
              123
            ],
            "items": {
              "type": "number"
            }
          },
          "type": {
            "type": "string",
            "description": "The literal string \"Point\"",
            "example": "Point",
            "default": "Point"
          }
        },
        "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      },
      "polygon": {
        "type": "array",
        "description": "An array of linear rings",
        "example": [
          [
            [
              -77.456654,
              42.241133,
              494
            ],
            [
              -75.414133,
              41.508282,
              571
            ],
            [
              -76.506042,
              42.417373,
              123
            ],
            [
              -77.456654,
              42.241133,
              346
            ]
          ]
        ],
        "items": {
          "minItems": 4,
          "type": "array",
          "description": "An array of at least four positions where the first equals the last",
          "example": [
            [
              -77.456654,
              42.241133,
              494
            ],
            [
              -75.414133,
              41.508282,
              571
            ],
            [
              -76.506042,
              42.417373,
              123
            ],
            [
              -77.456654,
              42.241133,
              346
            ]
          ],
          "items": {
            "minItems": 2,
            "type": "array",
            "description": "A single position",
            "example": [
              -76.506042,
              42.417373,
              123
            ],
            "items": {
              "type": "number"
            }
          }
        }
      },
      "polygonGeometry": {
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "description": "An array of linear rings",
            "example": [
              [
                [
                  -77.456654,
                  42.241133,
                  494
                ],
                [
                  -75.414133,
                  41.508282,
                  571
                ],
                [
                  -76.506042,
                  42.417373,
                  123
                ],
                [
                  -77.456654,
                  42.241133,
                  346
                ]
              ]
            ],
            "items": {
              "minItems": 4,
              "type": "array",
              "description": "An array of at least four positions where the first equals the last",
              "example": [
                [
                  -77.456654,
                  42.241133,
                  494
                ],
                [
                  -75.414133,
                  41.508282,
                  571
                ],
                [
                  -76.506042,
                  42.417373,
                  123
                ],
                [
                  -77.456654,
                  42.241133,
                  346
                ]
              ],
              "items": {
                "minItems": 2,
                "type": "array",
                "description": "A single position",
                "example": [
                  -76.506042,
                  42.417373,
                  123
                ],
                "items": {
                  "type": "number"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "The literal string \"Polygon\"",
            "example": "Polygon",
            "default": "Polygon"
          }
        },
        "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      },
      "position": {
        "minItems": 2,
        "type": "array",
        "description": "A single position",
        "example": [
          -76.506042,
          42.417373,
          123
        ],
        "items": {
          "type": "number"
        }
      },
      "status": {
        "required": [
          "message",
          "messageType"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A short message concerning the status of this request/response",
            "example": "Request accepted, response successful"
          },
          "messageType": {
            "type": "string",
            "description": "The logging level for the attached message",
            "example": "INFO",
            "enum": [
              "DEBUG",
              "ERROR",
              "WARNING",
              "INFO"
            ]
          }
        },
        "description": "An array of status messages to convey technical logging information from the server to the client."
      },
      "tokenPagination": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "description": "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example": 0,
            "default": 0
          },
          "currentPageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
            "example": "48bc6ac1",
            "deprecated": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
            "example": "cb668f63",
            "deprecated": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example": 1000,
            "default": 1000
          },
          "prevPageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
            "example": "9659857e",
            "deprecated": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of elements that are available on the server and match the requested query parameters.",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example": 1
          }
        },
        "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
        "example": {
          "currentPage": 0,
          "pageSize": 1000,
          "totalCount": 10,
          "totalPages": 1
        }
      },
      "variantsSearchRequest": {
        "type": "object",
        "properties": {
          "callSetDbIds": {
            "type": "array",
            "description": "**Deprecated in v2.1** Parameter unnecessary. Github issue number #474 \n<br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.",
            "example": [
              "4639fe3e",
              "b60d900b"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "commonCropNames": {
            "type": "array",
            "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example": [
              "Tomatillo",
              "Paw Paw"
            ],
            "items": {
              "type": "string"
            }
          },
          "end": {
            "type": "integer",
            "description": "The end of the window (0-based, exclusive) for which overlapping variants should be returned.",
            "example": 1500
          },
          "externalReferenceIDs": {
            "type": "array",
            "description": "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "externalReferenceIds": {
            "type": "array",
            "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example": [
              "doi:10.155454/12341234",
              "14a19841"
            ],
            "items": {
              "type": "string"
            }
          },
          "externalReferenceSources": {
            "type": "array",
            "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example": [
              "DOI",
              "Field App Name"
            ],
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "integer",
            "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The size of the pages to be returned. Default is `1000`.",
            "example": 1000
          },
          "pageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "example": "33c27874",
            "deprecated": true
          },
          "programDbIds": {
            "type": "array",
            "description": "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "8f5de35b",
              "0e2d4a13"
            ],
            "items": {
              "type": "string"
            }
          },
          "programNames": {
            "type": "array",
            "description": "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example": [
              "Better Breeding Program",
              "Best Breeding Program"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceDbId": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472\n<br/>Only return variants on this reference.",
            "example": "120a2d5c",
            "deprecated": true
          },
          "referenceDbIds": {
            "type": "array",
            "description": "The unique identifier representing a genotype `Reference`",
            "example": [
              "89ab4d17",
              "74d3b63d"
            ],
            "items": {
              "type": "string"
            }
          },
          "referenceSetDbIds": {
            "type": "array",
            "description": "The unique identifier representing a genotype `ReferenceSet`",
            "example": [
              "d3b63d4d",
              "3b63d74b"
            ],
            "items": {
              "type": "string"
            }
          },
          "start": {
            "type": "integer",
            "description": "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).",
            "example": 100
          },
          "studyDbIds": {
            "type": "array",
            "description": "List of study identifiers to search for",
            "example": [
              "cf6c4bd4",
              "691e69d6"
            ],
            "items": {
              "type": "string"
            }
          },
          "studyNames": {
            "type": "array",
            "description": "List of study names to filter search results",
            "example": [
              "The First Bob Study 2017",
              "Wheat Yield Trial 246"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialDbIds": {
            "type": "array",
            "description": "The ID which uniquely identifies a trial to search for",
            "example": [
              "d2593dc2",
              "9431a731"
            ],
            "items": {
              "type": "string"
            }
          },
          "trialNames": {
            "type": "array",
            "description": "The human readable name of a trial to search for",
            "example": [
              "All Yield Trials 2016",
              "Disease Resistance Study Comparison Group"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `Variants`",
            "example": [
              "3b63d889",
              "ab4d174d"
            ],
            "items": {
              "type": "string"
            }
          },
          "variantSetDbIds": {
            "type": "array",
            "description": "A list of IDs which uniquely identify `VariantSets`",
            "example": [
              "ba63d810",
              "434d1760"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AlleleMatrixResponse": {
        "title": "AlleleMatrixResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/AlleleMatrix"
          }
        }
      },
      "CallsListResponse": {
        "title": "CallsListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadataTokenPagination"
          },
          "result": {
            "$ref": "#/components/schemas/CallsListResponse_result"
          }
        }
      },
      "CallSetsListResponse": {
        "title": "CallSetsListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/CallSetsListResponseResult"
          }
        }
      },
      "callSetResponse": {
        "title": "callSetResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/CallSet"
          }
        }
      },
      "GenomeMapListResponse": {
        "title": "GenomeMapListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/GenomeMapListResponse_result"
          }
        }
      },
      "GenomeMapSingleResponse": {
        "title": "GenomeMapSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/GenomeMap"
          }
        }
      },
      "LinkageGroupListResponse": {
        "title": "LinkageGroupListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/LinkageGroupListResponse_result"
          }
        }
      },
      "MarkerPositionListResponse": {
        "title": "MarkerPositionListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/MarkerPositionListResponse_result"
          }
        }
      },
      "PlateListResponse": {
        "title": "PlateListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/PlateListResponse_result"
          }
        }
      },
      "PlateSingleResponse": {
        "title": "PlateSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/Plate"
          }
        }
      },
      "ReferencesListResponse": {
        "title": "ReferencesListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/ReferencesListResponseResult"
          }
        }
      },
      "ReferenceSingleResponse": {
        "title": "ReferenceSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/Reference"
          }
        }
      },
      "ReferenceBasesResponse": {
        "title": "ReferenceBasesResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/ReferenceBases"
          }
        }
      },
      "ReferenceSetsListResponse": {
        "title": "ReferenceSetsListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/ReferenceSetsListResponseResult"
          }
        }
      },
      "ReferenceSetsSingleResponse": {
        "title": "ReferenceSetsSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/ReferenceSet"
          }
        }
      },
      "SampleListResponse": {
        "title": "SampleListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/SampleListResponse_result"
          }
        }
      },
      "SampleSingleResponse": {
        "title": "SampleSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/Sample"
          }
        }
      },
      "202AcceptedSearchResponse": {
        "title": "202AcceptedSearchResponse",
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/202AcceptedSearchResponse_result"
          }
        }
      },
      "VariantsListResponse": {
        "title": "VariantsListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadataTokenPagination"
          },
          "result": {
            "$ref": "#/components/schemas/VariantsListResponseResult"
          }
        }
      },
      "VariantSetsListResponse": {
        "title": "VariantSetsListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VariantSetsListResponseResult"
          }
        }
      },
      "VariantSingleResponse": {
        "title": "VariantSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/Variant"
          }
        }
      },
      "variantSetResponse": {
        "title": "variantSetResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VariantSet"
          }
        }
      },
      "VendorOrderListResponse": {
        "title": "VendorOrderListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorOrderListResponse_result"
          }
        }
      },
      "VendorOrderSubmissionSingleResponse": {
        "title": "VendorOrderSubmissionSingleResponse",
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorOrderSubmission"
          }
        }
      },
      "VendorPlateListResponse": {
        "title": "VendorPlateListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorPlateListResponse_result"
          }
        }
      },
      "VendorResultFileListResponse": {
        "title": "VendorResultFileListResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorResultFileListResponse_result"
          }
        }
      },
      "VendorOrderStatusResponse": {
        "title": "VendorOrderStatusResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorOrderStatusResponse_result"
          }
        }
      },
      "VendorPlateSubmissionIdSingleResponse": {
        "title": "VendorPlateSubmissionIdSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorPlateSubmissionId"
          }
        }
      },
      "VendorPlateSubmissionSingleResponse": {
        "title": "VendorPlateSubmissionSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorPlateSubmission"
          }
        }
      },
      "VendorSpecificationSingleResponse": {
        "title": "VendorSpecificationSingleResponse",
        "required": [
          "metadata",
          "result"
        ],
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "result": {
            "$ref": "#/components/schemas/VendorSpecification"
          }
        }
      },
      "AlleleMatrix_dataMatrices": {
        "type": "object",
        "properties": {
          "dataMatrix": {
            "type": "array",
            "description": "The two dimensional array of data, providing the allele matrix or an additional layer of metadata associated with each genotype value. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows.",
            "example": [
              [
                "0|0",
                "1|0",
                "1/1"
              ],
              [
                "0|0",
                "1|0",
                "1/1"
              ],
              [
                "0|0",
                "1|0",
                "1/1"
              ]
            ],
            "items": {
              "type": "array",
              "description": "An array of rows in the data matrix",
              "items": {
                "type": "string",
                "description": "All the values per row (columns) in the data matrix"
              }
            }
          },
          "dataMatrixAbbreviation": {
            "type": "string",
            "description": "The abbreviated code of the field represented in this data matrix. These codes should match the VCF standard when possible and the key word \"GT\" is reserved for the allele matrix. Examples of other metadata matrices include: \"GQ\", \"RD\", and \"HQ\"\n<br> This maps to a FORMAT field in the VCF file standard.",
            "example": "GT"
          },
          "dataMatrixName": {
            "type": "string",
            "description": "The name of the field represented in this data matrix. The key word \"Genotype\" is reserved for the allele matrix. Examples of other metadata matrices include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\"\n<br> This maps to a FORMAT field in the VCF file standard.",
            "example": "Genotype"
          },
          "dataType": {
            "type": "string",
            "description": "The type of field represented in this data matrix. This is intended to help parse the data out of JSON.",
            "example": "string",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean"
            ]
          }
        },
        "description": "This is a single data matrix. It could be the allele matrix or an additional layer of metadata associated with each genotype value."
      },
      "AlleleMatrix_pagination": {
        "type": "object",
        "properties": {
          "dimension": {
            "type": "string",
            "description": "The dimension of the matrix being paginated",
            "example": "VARIANTS",
            "enum": [
              "CALLSETS",
              "VARIANTS"
            ]
          },
          "page": {
            "type": "integer",
            "description": "the requested page number (zero indexed)",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "the maximum number of elements per page in this dimension of the matrix",
            "example": 500
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of elements that are available on the server and match the requested query parameters.",
            "example": 10000
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br/>totalPages = CEILING( totalCount / requested_page_size)",
            "example": 20
          }
        }
      },
      "AlleleMatrixSearchRequest_pagination": {
        "type": "object",
        "properties": {
          "dimension": {
            "type": "string",
            "description": "the dimension of the matrix being paginated",
            "example": "VARIANTS",
            "enum": [
              "CALLSETS",
              "VARIANTS"
            ]
          },
          "page": {
            "type": "integer",
            "description": "the requested page number (zero indexed)",
            "example": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "the maximum number of elements per page in this dimension of the matrix",
            "example": 500
          }
        }
      },
      "Call_genotypeMetadata": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.",
            "example": "integer",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean"
            ]
          },
          "fieldAbbreviation": {
            "type": "string",
            "description": "The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: \"GQ\", \"RD\", and \"HQ\"\n<br> This maps to a FORMAT field in the VCF file standard.",
            "example": "GQ"
          },
          "fieldName": {
            "type": "string",
            "description": "The name of the field represented in this Genotype Field. Examples include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\"\n<br> This maps to a FORMAT field in the VCF file standard.",
            "example": "Genotype Quality"
          },
          "fieldValue": {
            "type": "string",
            "description": "The additional metadata value associated with this genotype call",
            "example": "45.2"
          }
        }
      },
      "ExternalReferences_inner": {
        "type": "object",
        "properties": {
          "referenceID": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
            "deprecated": true
          },
          "referenceId": {
            "type": "string",
            "description": "The external reference ID. Could be a simple string or a URI."
          },
          "referenceSource": {
            "type": "string",
            "description": "An identifier for the source system or database of this reference"
          }
        }
      },
      "MethodBaseClass_ontologyReference_documentationLinks": {
        "type": "object",
        "properties": {
          "URL": {
            "type": "string",
            "format": "uri",
            "example": "http://purl.obolibrary.org/obo/ro.owl"
          },
          "type": {
            "type": "string",
            "example": "OBO",
            "enum": [
              "OBO",
              "RDF",
              "WEBPAGE"
            ]
          }
        }
      },
      "MethodBaseClass_ontologyReference": {
        "required": [
          "ontologyDbId",
          "ontologyName"
        ],
        "type": "object",
        "properties": {
          "documentationLinks": {
            "type": "array",
            "description": "links to various ontology documentation",
            "items": {
              "$ref": "#/components/schemas/MethodBaseClass_ontologyReference_documentationLinks"
            }
          },
          "ontologyDbId": {
            "type": "string",
            "description": "Ontology database unique identifier",
            "example": "6b071868"
          },
          "ontologyName": {
            "type": "string",
            "description": "Ontology name",
            "example": "The Crop Ontology"
          },
          "version": {
            "type": "string",
            "description": "Ontology version (no specific format)",
            "example": "7.2.3"
          }
        },
        "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
      },
      "Reference_sourceGermplasm": {
        "type": "object",
        "properties": {
          "germplasmDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a `Germplasm` within the given database server",
            "example": "d4076594"
          },
          "germplasmName": {
            "type": "string",
            "description": "The human readable name of a `Germplasm`",
            "example": "A0000003"
          }
        }
      },
      "ReferenceSet_sourceGermplasm": {
        "type": "object",
        "properties": {
          "germplasmDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a germplasm within the given database server",
            "example": "d4076594"
          },
          "germplasmName": {
            "type": "string",
            "description": "The human readable name of a germplasm",
            "example": "A0000003"
          }
        }
      },
      "ScaleBaseClass_validValues_categories": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A text label for a category"
          },
          "value": {
            "type": "string",
            "description": "The actual value for a category"
          }
        }
      },
      "ScaleBaseClass_validValues": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "List of possible values with optional labels",
            "example": [
              {
                "label": "low",
                "value": "0"
              },
              {
                "label": "medium",
                "value": "5"
              },
              {
                "label": "high",
                "value": "10"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ScaleBaseClass_validValues_categories"
            }
          },
          "max": {
            "type": "integer",
            "description": "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
            "example": 9999,
            "deprecated": true
          },
          "maximumValue": {
            "type": "string",
            "description": "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
            "example": "9999"
          },
          "min": {
            "type": "integer",
            "description": "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
            "example": 2,
            "deprecated": true
          },
          "minimumValue": {
            "type": "string",
            "description": "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
            "example": "2"
          }
        }
      },
      "VariableBaseClass_method": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "bibliographicalReference": {
            "type": "string",
            "description": "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
            "example": "Smith, 1893, Really Cool Paper, Popular Journal"
          },
          "description": {
            "type": "string",
            "description": "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
            "example": "A measuring tape was used"
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "formula": {
            "type": "string",
            "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
            "example": "a^2 + b^2 = c^2"
          },
          "methodClass": {
            "type": "string",
            "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
            "example": "Measurement"
          },
          "methodDbId": {
            "type": "string",
            "description": "Method unique identifier",
            "example": "0adb2764"
          },
          "methodName": {
            "type": "string",
            "description": "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example": "Measuring Tape"
          },
          "methodPUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "example": "http://my-traits.com/trait/CO_123:0000212"
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          }
        },
        "description": "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
      },
      "VariableBaseClass_scale": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "dataType": {
            "type": "string",
            "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
            "example": "Numerical",
            "enum": [
              "Code",
              "Date",
              "Duration",
              "Nominal",
              "Numerical",
              "Ordinal",
              "Text"
            ]
          },
          "decimalPlaces": {
            "type": "integer",
            "description": "For numerical, number of decimal places to be reported",
            "example": 2
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "scaleDbId": {
            "type": "string",
            "description": "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
            "example": "af730171"
          },
          "scaleName": {
            "type": "string",
            "description": "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "example": "Meters"
          },
          "scalePUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "example": "http://my-traits.com/trait/CO_123:0000112"
          },
          "units": {
            "type": "string",
            "description": "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
            "example": "m"
          },
          "validValues": {
            "$ref": "#/components/schemas/ScaleBaseClass_validValues"
          }
        },
        "description": "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
      },
      "VariableBaseClass_trait": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestriced by the BrAPI specification."
          },
          "alternativeAbbreviations": {
            "type": "array",
            "description": "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
            "example": [
              "H",
              "PH",
              "H1"
            ],
            "items": {
              "type": "string"
            }
          },
          "attribute": {
            "type": "string",
            "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example": "height"
          },
          "attributePUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example": "http://my-traits.com/trait/PO:00012345"
          },
          "entity": {
            "type": "string",
            "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "example": "Stalk"
          },
          "entityPUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "example": "http://my-traits.com/trait/PATO:00098765"
          },
          "externalReferences": {
            "title": "ExternalReferences",
            "type": "array",
            "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example": [
              {
                "referenceId": "doi:10.155454/12341234",
                "referenceSource": "DOI"
              },
              {
                "referenceId": "75a50e76",
                "referenceSource": "Remote Data Collection Upload Tool"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ExternalReferences_inner"
            }
          },
          "mainAbbreviation": {
            "type": "string",
            "description": "A shortened version of the human readable name for a Trait",
            "example": "PH"
          },
          "ontologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "status": {
            "type": "string",
            "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "example": "recommended"
          },
          "synonyms": {
            "type": "array",
            "description": "Other trait names",
            "example": [
              "Height",
              "Plant Height",
              "Stalk Height",
              "Canopy Height"
            ],
            "items": {
              "type": "string"
            }
          },
          "traitClass": {
            "type": "string",
            "description": "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
            "example": "phenological"
          },
          "traitDbId": {
            "type": "string",
            "description": "The ID which uniquely identifies a trait",
            "example": "9b2e34f5"
          },
          "traitDescription": {
            "type": "string",
            "description": "The description of a trait",
            "example": "The height of the plant"
          },
          "traitName": {
            "type": "string",
            "description": "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example": "Height"
          },
          "traitPUI": {
            "type": "string",
            "description": "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "example": "http://my-traits.com/trait/CO_123:0000012"
          }
        },
        "description": "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
      },
      "VariantSet_metadataFields": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "description": "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.",
            "example": "integer",
            "enum": [
              "string",
              "integer",
              "float",
              "boolean"
            ]
          },
          "fieldAbbreviation": {
            "type": "string",
            "description": "The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: \"GQ\", \"RD\", and \"HQ\"",
            "example": "GQ"
          },
          "fieldName": {
            "type": "string",
            "description": "The name of the field represented in this Genotype Field. Examples include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\"",
            "example": "Genotype Quality"
          }
        },
        "description": "This represents a type of genotyping data or metadata available in this VariantSet"
      },
      "ShipmentForm": {
        "title": "ShipmentForm",
        "required": [
          "fileURL"
        ],
        "type": "object",
        "properties": {
          "fileDescription": {
            "type": "string",
            "description": "The human readable long description for this form",
            "example": "This is a shipment manifest form"
          },
          "fileName": {
            "type": "string",
            "description": "The human readable name for this form",
            "example": "Shipment Manifest"
          },
          "fileURL": {
            "type": "string",
            "description": "The URL to download this form",
            "format": "uri",
            "example": "https://vendor.org/forms/manifest.pdf"
          }
        }
      },
      "VendorOrderSubmissionRequest_concentration": {
        "type": "object",
        "properties": {
          "units": {
            "type": "string",
            "description": "Units (example: \"ng/ul\")",
            "example": "ng/ul"
          },
          "value": {
            "type": "number",
            "description": "Value (example: \"2.3\")",
            "example": 2.3
          }
        },
        "description": "A value with units"
      },
      "VendorOrderSubmissionRequest_samples": {
        "required": [
          "clientSampleId"
        ],
        "type": "object",
        "properties": {
          "clientSampleBarCode": {
            "type": "string",
            "description": "(Optional) The value of the bar code attached to this sample",
            "example": "7c07e527"
          },
          "clientSampleId": {
            "type": "string",
            "description": "The ID which uniquely identifies this sample to the client making the request",
            "example": "bd96bd69"
          },
          "column": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "The Column identifier for this samples location in the plate",
            "example": 6
          },
          "comments": {
            "type": "string",
            "description": "Generic comments about this sample for the vendor",
            "example": "This is my favorite sample, please be extra careful with it."
          },
          "concentration": {
            "$ref": "#/components/schemas/VendorOrderSubmissionRequest_concentration"
          },
          "organismName": {
            "type": "string",
            "description": "Scientific organism name",
            "example": "Aspergillus fructus"
          },
          "row": {
            "type": "string",
            "description": "The Row identifier for this samples location in the plate",
            "example": "B"
          },
          "speciesName": {
            "type": "string",
            "description": "Scientific species name",
            "example": "Aspergillus fructus"
          },
          "taxonomyOntologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "tissueType": {
            "type": "string",
            "description": "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
            "example": "Root"
          },
          "tissueTypeOntologyReference": {
            "$ref": "#/components/schemas/MethodBaseClass_ontologyReference"
          },
          "volume": {
            "$ref": "#/components/schemas/VendorOrderSubmissionRequest_concentration"
          },
          "well": {
            "type": "string",
            "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
            "example": "B6"
          }
        }
      },
      "VendorOrderSubmissionRequest_plates": {
        "type": "object",
        "properties": {
          "clientPlateBarcode": {
            "type": "string",
            "description": "(Optional) The value of the bar code attached to this plate",
            "example": "6ebf3f25"
          },
          "clientPlateId": {
            "type": "string",
            "description": "The ID which uniquely identifies this plate to the client making the request",
            "example": "02a8d6f0"
          },
          "sampleSubmissionFormat": {
            "type": "string",
            "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "example": "PLATE_96",
            "enum": [
              "PLATE_96",
              "TUBES"
            ]
          },
          "samples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorOrderSubmissionRequest_samples"
            }
          }
        }
      },
      "VendorPlateSubmission_plates": {
        "type": "object",
        "properties": {
          "clientPlateBarcode": {
            "type": "string",
            "description": "(Optional) The value of the bar code attached to this plate",
            "example": "bfb33593"
          },
          "clientPlateId": {
            "type": "string",
            "description": "The ID which uniquely identifies this plate to the client making the request",
            "example": "dae8f49d"
          },
          "sampleSubmissionFormat": {
            "$ref": "#/components/schemas/PlateFormat"
          },
          "samples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorSample"
            }
          }
        }
      },
      "VendorSpecificationService_specificRequirements": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The value of a key-value entry in a map of Vendor specific requirements"
          },
          "key": {
            "type": "string",
            "description": "The key of a key-value entry in a map of Vendor specific requirements"
          }
        }
      },
      "metadata_datafiles": {
        "required": [
          "fileURL"
        ],
        "type": "object",
        "properties": {
          "fileDescription": {
            "type": "string",
            "description": "A human readable description of the file contents",
            "example": "This is an Excel data file"
          },
          "fileMD5Hash": {
            "type": "string",
            "description": "The MD5 Hash of the file contents to be used as a check sum",
            "example": "c2365e900c81a89cf74d83dab60df146"
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file",
            "example": "datafile.xlsx"
          },
          "fileSize": {
            "type": "integer",
            "description": "The size of the file in bytes",
            "example": 4398
          },
          "fileType": {
            "type": "string",
            "description": "The type or format of the file. Preferably MIME Type.",
            "example": "application/vnd.ms-excel"
          },
          "fileURL": {
            "type": "string",
            "description": "The absolute URL where the file is located",
            "format": "uri",
            "example": "https://wiki.brapi.org/examples/datafile.xlsx"
          }
        },
        "description": "A dataFile contains a URL and the relevant file metadata to represent a file"
      },
      "metadata_pagination": {
        "required": [
          "currentPage",
          "pageSize"
        ],
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "description": "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example": 0,
            "default": 0
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example": 1000,
            "default": 1000
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of elements that are available on the server and match the requested query parameters.",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example": 1
          }
        },
        "description": "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
      },
      "metadata_status": {
        "required": [
          "message",
          "messageType"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A short message concerning the status of this request/response",
            "example": "Request accepted, response successful"
          },
          "messageType": {
            "type": "string",
            "description": "The logging level for the attached message",
            "example": "INFO",
            "enum": [
              "DEBUG",
              "ERROR",
              "WARNING",
              "INFO"
            ]
          }
        },
        "description": "An array of status messages to convey technical logging information from the server to the client."
      },
      "metadataTokenPagination_pagination": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "description": "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example": 0,
            "default": 0
          },
          "currentPageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
            "example": "48bc6ac1",
            "deprecated": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
            "example": "cb668f63",
            "deprecated": true
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example": 1000,
            "default": 1000
          },
          "prevPageToken": {
            "type": "string",
            "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
            "example": "9659857e",
            "deprecated": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of elements that are available on the server and match the requested query parameters.",
            "example": 10
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example": 1
          }
        },
        "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
        "example": "{\"currentPage\":0,\"pageSize\":1000,\"totalCount\":10,\"totalPages\":1}"
      },
      "CallsListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/Call"
            }
          },
          "expandHomozygotes": {
            "type": "boolean",
            "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example": true
          },
          "sepPhased": {
            "type": "string",
            "description": "The string used as a separator for phased allele calls.",
            "example": "|"
          },
          "sepUnphased": {
            "type": "string",
            "description": "The string used as a separator for unphased allele calls.",
            "example": "/"
          },
          "unknownString": {
            "type": "string",
            "description": "The string used as a representation for missing data.",
            "example": "."
          }
        }
      },
      "CallSetsListResponseResult": {
        "title": "CallSetsListResponseResult",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/CallSet"
            }
          }
        }
      },
      "GenomeMapListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/GenomeMap"
            }
          }
        }
      },
      "LinkageGroupListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/LinkageGroup"
            }
          }
        }
      },
      "MarkerPositionListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/MarkerPosition"
            }
          }
        }
      },
      "PlateListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/Plate"
            }
          }
        }
      },
      "ReferencesListResponseResult": {
        "title": "ReferencesListResponseResult",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        }
      },
      "ReferenceSetsListResponseResult": {
        "title": "ReferenceSetsListResponseResult",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/ReferenceSet"
            }
          }
        }
      },
      "SampleListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/Sample"
            }
          }
        }
      },
      "202AcceptedSearchResponse_result": {
        "type": "object",
        "properties": {
          "searchResultsDbId": {
            "type": "string",
            "example": "551ae08c"
          }
        }
      },
      "VariantsListResponseResult": {
        "title": "VariantsListResponseResult",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/Variant"
            }
          }
        }
      },
      "VariantSetsListResponseResult": {
        "title": "VariantSetsListResponseResult",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/VariantSet"
            }
          }
        }
      },
      "VendorOrderListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/VendorOrder"
            }
          }
        }
      },
      "VendorPlateListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/VendorPlate"
            }
          }
        }
      },
      "VendorResultFileListResponse_result": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
            "items": {
              "$ref": "#/components/schemas/VendorResultFile"
            }
          }
        }
      },
      "VendorOrderStatusResponse_result": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "registered",
              "received",
              "inProgress",
              "completed",
              "rejected"
            ]
          }
        }
      }
    },
    "responses": {
      "202AcceptedSearchResponse": {
        "description": "Accepted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/202AcceptedSearchResponse"
            }
          }
        }
      },
      "400BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
          }
        }
      },
      "401Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
          }
        }
      },
      "403Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
          }
        }
      },
      "404NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
          }
        }
      },
      "AlleleMatrixResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AlleleMatrixResponse"
            }
          }
        }
      },
      "CallSetsListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CallSetsListResponse"
            }
          }
        }
      },
      "CallsListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CallsListResponse"
            }
          }
        }
      },
      "MarkerPositionListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MarkerPositionListResponse"
            }
          }
        }
      },
      "PlateListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlateListResponse"
            }
          }
        }
      },
      "PlateSingleResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PlateSingleResponse"
            }
          }
        }
      },
      "ReferenceSetsListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferenceSetsListResponse"
            }
          }
        }
      },
      "ReferencesListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReferencesListResponse"
            }
          }
        }
      },
      "SampleListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SampleListResponse"
            }
          }
        }
      },
      "SampleSingleResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SampleSingleResponse"
            }
          }
        }
      },
      "VariantSetsListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VariantSetsListResponse"
            }
          }
        }
      },
      "VariantsListResponse": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VariantsListResponse"
            }
          }
        }
      }
    },
    "parameters": {
      "acceptHeader": {
        "name": "Accept",
        "in": "header",
        "description": "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/ContentTypes"
        },
        "example": "application/json"
      },
      "authorizationHeader": {
        "name": "Authorization",
        "in": "header",
        "description": "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "pattern": "^Bearer .*$",
          "type": "string"
        },
        "example": "Bearer XXXX"
      },
      "callSetDbId": {
        "name": "callSetDbId",
        "in": "query",
        "description": "The ID which uniquely identifies a `CallSet` within the given database server",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "commonCropName": {
        "name": "commonCropName",
        "in": "query",
        "description": "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "dataMatrixAbbreviations": {
        "name": "dataMatrixAbbreviations",
        "in": "query",
        "description": "\"dataMatrixAbbreviations\" is a comma seperated list of abbreviations (ie 'GT, RD' etc). This list controls which data matrices are returned in the response.\n<br> This maps to a FORMAT field in the VCF file standard.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "dataMatrixNames": {
        "name": "dataMatrixNames",
        "in": "query",
        "description": "\"dataMatrixNames\" is a comma seperated list of names (ie 'Genotype, Read Depth' etc). This list controls which data matrices are returned in the response.\n<br> This maps to a FORMAT field in the VCF file standard.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "expandHomozygotes": {
        "name": "expandHomozygotes",
        "in": "query",
        "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "externalReferenceID": {
        "name": "externalReferenceID",
        "in": "query",
        "description": "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
        "required": false,
        "deprecated": true,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "externalReferenceId": {
        "name": "externalReferenceId",
        "in": "query",
        "description": "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "externalReferenceSource": {
        "name": "externalReferenceSource",
        "in": "query",
        "description": "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "germplasmDbId": {
        "name": "germplasmDbId",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Germplasm` unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "germplasmName": {
        "name": "germplasmName",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Germplasm` by its human readable name. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "germplasmPUI": {
        "name": "germplasmPUI",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Germplasm` by its global permanent unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "methodDbId": {
        "name": "methodDbId",
        "in": "query",
        "description": "Method unique identifier",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "methodName": {
        "name": "methodName",
        "in": "query",
        "description": "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "methodPUI": {
        "name": "methodPUI",
        "in": "query",
        "description": "The Permanent Unique Identifier of a Method, usually in the form of a URI",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelCode": {
        "name": "observationUnitLevelCode",
        "in": "query",
        "description": "The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` \nor `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelName": {
        "name": "observationUnitLevelName",
        "in": "query",
        "description": "The Observation Unit Level. Returns only the observation unit of the specified Level. \n<br/>References ObservationUnit->observationUnitPosition->observationLevel->levelName \n<br/>**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelOrder": {
        "name": "observationUnitLevelOrder",
        "in": "query",
        "description": "The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. \nReferences ObservationUnit->observationUnitPosition->observationLevel->levelOrder \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelRelationshipCode": {
        "name": "observationUnitLevelRelationshipCode",
        "in": "query",
        "description": "The Observation Unit Level Code. \n<br/>This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelRelationshipDbId": {
        "name": "observationUnitLevelRelationshipDbId",
        "in": "query",
        "description": "The observationUnitDbId associated with a particular level and code.\n<br/>This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->observationUnitDbId \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelRelationshipName": {
        "name": "observationUnitLevelRelationshipName",
        "in": "query",
        "description": "The Observation Unit Level Relationship is a connection that this observation unit has to another level of the hierarchy. \n<br/>For example, if you have several observation units at a 'plot' level, they might all share a relationship to the same 'field' level.  \n<br/>Use this parameter to identify groups of observation units that share a relationship level. \n<br/>**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "observationUnitLevelRelationshipOrder": {
        "name": "observationUnitLevelRelationshipOrder",
        "in": "query",
        "description": "The Observation Unit Level Order Number. \n<br/>Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "ontologyDbId": {
        "name": "ontologyDbId",
        "in": "query",
        "description": "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\nUse `GET /ontologies` to find the list of available ontologies on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer"
        },
        "example": "0"
      },
      "pageSize": {
        "name": "pageSize",
        "in": "query",
        "description": "The size of the pages to be returned. Default is `1000`.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer"
        },
        "example": 1000
      },
      "pageToken": {
        "name": "pageToken",
        "in": "query",
        "description": "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
        "required": false,
        "deprecated": true,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        },
        "example": "33c27874"
      },
      "positionRange": {
        "name": "positionRange",
        "in": "query",
        "description": "The postion range to search\n<br/> Uses the format \"contig:start-end\" where \"contig\" is the chromosome or contig name, \"start\" is  \nthe starting position of the range, and \"end\" is the ending position of the range\n<br> Example: CRHOM_1:12000-14000",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "preview": {
        "name": "preview",
        "in": "query",
        "description": "Default Value = false\n<br/>If 'preview' is set to true, then the server should return with the \"dataMatrices\" field as null or empty. All other data fields should be returned normally. \nThis is intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>If 'preview' is set to false or not set (default), then the server should return all the matrix data as requested.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "programDbId": {
        "name": "programDbId",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "programName": {
        "name": "programName",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Program` by its human readable name. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "scaleDbId": {
        "name": "scaleDbId",
        "in": "query",
        "description": "Scale unique identifier",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "scaleName": {
        "name": "scaleName",
        "in": "query",
        "description": "Human readable name for the scale\n<br/>MIAPPE V1.1 (DM-88) Scale  Name of the scale of observation",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "scalePUI": {
        "name": "scalePUI",
        "in": "query",
        "description": "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "searchResultsDbId": {
        "name": "searchResultsDbId",
        "in": "path",
        "description": "Unique identifier which references the search results",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "sepPhased": {
        "name": "sepPhased",
        "in": "query",
        "description": "The string to use as a separator for phased allele calls",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "sepUnphased": {
        "name": "sepUnphased",
        "in": "query",
        "description": "The string to use as a separator for unphased allele calls",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "studyDbId": {
        "name": "studyDbId",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "studyName": {
        "name": "studyName",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Study` by its human readable name. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "traitDbId": {
        "name": "traitDbId",
        "in": "query",
        "description": "Trait unique identifier",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "traitName": {
        "name": "traitName",
        "in": "query",
        "description": "Human readable name for the trait\n<br/>MIAPPE V1.1 (DM-88) Trait  Name of the trait of observation",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "traitPUI": {
        "name": "traitPUI",
        "in": "query",
        "description": "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "trialDbId": {
        "name": "trialDbId",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "trialName": {
        "name": "trialName",
        "in": "query",
        "description": "Use this parameter to only return results associated with the given `Trial` by its human readable name. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "unknownString": {
        "name": "unknownString",
        "in": "query",
        "description": "The string to use as a representation for missing data",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "variantDbId": {
        "name": "variantDbId",
        "in": "query",
        "description": "The ID which uniquely identifies a `Variant` within the given database server",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "variantSetDbId": {
        "name": "variantSetDbId",
        "in": "query",
        "description": "The ID which uniquely identifies a `VariantSet` within the given database server",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "AuthorizationToken": {
        "type": "http",
        "description": "OAuth Bearer Token - A valid Bearer token to prove authorization",
        "scheme": "bearer",
        "bearerFormat": "nonce token or JWT"
      }
    }
  }
}